/* This file was generated by SableCC (http://www.sablecc.org/). */

package cordel.analysis;

import cordel.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAArProgramaAPrograma(AArProgramaAPrograma node);
    void caseAArDecVariavelADecVariavel(AArDecVariavelADecVariavel node);
    void caseAArDecFuncaoADecFuncao(AArDecFuncaoADecFuncao node);
    void caseAArParametrosAParametros(AArParametrosAParametros node);
    void caseAArBlocoABloco(AArBlocoABloco node);
    void caseAArInteiroATipo(AArInteiroATipo node);
    void caseAArCaractereATipo(AArCaractereATipo node);
    void caseAArFloatATipo(AArFloatATipo node);
    void caseAArBoolATipo(AArBoolATipo node);
    void caseAANadaATipo(AANadaATipo node);
    void caseAArVetorATipo(AArVetorATipo node);
    void caseAAIgualAExp(AAIgualAExp node);
    void caseAAMenorIgualAExp(AAMenorIgualAExp node);
    void caseAAMaiorIgualAExp(AAMaiorIgualAExp node);
    void caseAAMenorAExp(AAMenorAExp node);
    void caseAAMaiorAExp(AAMaiorAExp node);
    void caseAANegacaoAExp(AANegacaoAExp node);
    void caseAAAndAExp(AAAndAExp node);
    void caseAAOrAExp(AAOrAExp node);
    void caseAASomaAExp(AASomaAExp node);
    void caseAASubAExp(AASubAExp node);
    void caseAAMultAExp(AAMultAExp node);
    void caseAADivAExp(AADivAExp node);
    void caseAAMenosAExp(AAMenosAExp node);
    void caseAANumInteiroAExp(AANumInteiroAExp node);
    void caseAANumRealAExp(AANumRealAExp node);
    void caseAACaractereAExp(AACaractereAExp node);
    void caseAASimAExp(AASimAExp node);
    void caseAANaoAExp(AANaoAExp node);
    void caseAAStringAExp(AAStringAExp node);
    void caseAAVariavelAExp(AAVariavelAExp node);
    void caseAAIdAExp(AAIdAExp node);
    void caseAAVarExpAExp(AAVarExpAExp node);
    void caseAAChamadaAExp(AAChamadaAExp node);
    void caseAAListaExpAExp(AAListaExpAExp node);
    void caseAASeAComando(AASeAComando node);
    void caseAASeAbertoAComando(AASeAbertoAComando node);
    void caseAASeSenaoAComando(AASeSenaoAComando node);
    void caseAAEnquantoAComando(AAEnquantoAComando node);
    void caseAAArrodeieAComando(AAArrodeieAComando node);
    void caseAASeSenaoDirectAComando(AASeSenaoDirectAComando node);
    void caseAAEnquantoDirectAComando(AAEnquantoDirectAComando node);
    void caseAAArrodeieDirectAComando(AAArrodeieDirectAComando node);
    void caseAAReturnAComando(AAReturnAComando node);
    void caseAAAtribuicaoAComando(AAAtribuicaoAComando node);
    void caseAArBlocoAComando(AArBlocoAComando node);
    void caseAArChamadaAComando(AArChamadaAComando node);
    void caseAArAtribuicaoAAtrib(AArAtribuicaoAAtrib node);
    void caseAAListaAtribAAtrib(AAListaAtribAAtrib node);

    void caseTNumInteiro(TNumInteiro node);
    void caseTNumReal(TNumReal node);
    void caseTNumero(TNumero node);
    void caseTCaractere(TCaractere node);
    void caseTString(TString node);
    void caseTLinhaComent(TLinhaComent node);
    void caseTBoxComent(TBoxComent node);
    void caseTSoma(TSoma node);
    void caseTSubt(TSubt node);
    void caseTMult(TMult node);
    void caseTDiv(TDiv node);
    void caseTAtrib(TAtrib node);
    void caseTSepParam(TSepParam node);
    void caseTParEsq(TParEsq node);
    void caseTParDir(TParDir node);
    void caseTColEsq(TColEsq node);
    void caseTColDir(TColDir node);
    void caseTMenor(TMenor node);
    void caseTMaior(TMaior node);
    void caseTIgual(TIgual node);
    void caseTMenorIg(TMenorIg node);
    void caseTMaiorIg(TMaiorIg node);
    void caseTPtVirgula(TPtVirgula node);
    void caseTDoisPt(TDoisPt node);
    void caseTVirgula(TVirgula node);
    void caseTInt(TInt node);
    void caseTFloat(TFloat node);
    void caseTChar(TChar node);
    void caseTBool(TBool node);
    void caseTNada(TNada node);
    void caseTOr(TOr node);
    void caseTNot(TNot node);
    void caseTAnd(TAnd node);
    void caseTIf(TIf node);
    void caseTElse(TElse node);
    void caseTFor(TFor node);
    void caseTWhile(TWhile node);
    void caseTRepeat(TRepeat node);
    void caseTRuma(TRuma node);
    void caseTDe(TDe node);
    void caseTMande(TMande node);
    void caseTVolta(TVolta node);
    void caseTArrume(TArrume node);
    void caseTAssim(TAssim node);
    void caseTInicio(TInicio node);
    void caseTFim(TFim node);
    void caseTSim(TSim node);
    void caseTNao(TNao node);
    void caseTId(TId node);
    void caseTVazio(TVazio node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
