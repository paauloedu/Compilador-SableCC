/* This file was generated by SableCC (http://www.sablecc.org/). */

package cordel.node;

import cordel.analysis.*;

@SuppressWarnings("nls")
public final class ASubOpcao extends POpcao
{
    private POpcao _opcao_;
    private TSubt _subt_;
    private PFator _fator_;

    public ASubOpcao()
    {
        // Constructor
    }

    public ASubOpcao(
        @SuppressWarnings("hiding") POpcao _opcao_,
        @SuppressWarnings("hiding") TSubt _subt_,
        @SuppressWarnings("hiding") PFator _fator_)
    {
        // Constructor
        setOpcao(_opcao_);

        setSubt(_subt_);

        setFator(_fator_);

    }

    @Override
    public Object clone()
    {
        return new ASubOpcao(
            cloneNode(this._opcao_),
            cloneNode(this._subt_),
            cloneNode(this._fator_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASubOpcao(this);
    }

    public POpcao getOpcao()
    {
        return this._opcao_;
    }

    public void setOpcao(POpcao node)
    {
        if(this._opcao_ != null)
        {
            this._opcao_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._opcao_ = node;
    }

    public TSubt getSubt()
    {
        return this._subt_;
    }

    public void setSubt(TSubt node)
    {
        if(this._subt_ != null)
        {
            this._subt_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._subt_ = node;
    }

    public PFator getFator()
    {
        return this._fator_;
    }

    public void setFator(PFator node)
    {
        if(this._fator_ != null)
        {
            this._fator_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._fator_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._opcao_)
            + toString(this._subt_)
            + toString(this._fator_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._opcao_ == child)
        {
            this._opcao_ = null;
            return;
        }

        if(this._subt_ == child)
        {
            this._subt_ = null;
            return;
        }

        if(this._fator_ == child)
        {
            this._fator_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._opcao_ == oldChild)
        {
            setOpcao((POpcao) newChild);
            return;
        }

        if(this._subt_ == oldChild)
        {
            setSubt((TSubt) newChild);
            return;
        }

        if(this._fator_ == oldChild)
        {
            setFator((PFator) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
