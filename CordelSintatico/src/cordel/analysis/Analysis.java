/* This file was generated by SableCC (http://www.sablecc.org/). */

package cordel.analysis;

import cordel.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAPrograma(APrograma node);
    void caseADecVariavelDecOrDef(ADecVariavelDecOrDef node);
    void caseADecFuncaoDecOrDef(ADecFuncaoDecOrDef node);
    void caseADecVariavel(ADecVariavel node);
    void caseATipoTipo(ATipoTipo node);
    void caseAVetorTipo(AVetorTipo node);
    void caseAIntTipoBase(AIntTipoBase node);
    void caseACaractereTipoBase(ACaractereTipoBase node);
    void caseAFloatTipoBase(AFloatTipoBase node);
    void caseABoolTipoBase(ABoolTipoBase node);
    void caseAOpcaoExp(AOpcaoExp node);
    void caseAIgualExp(AIgualExp node);
    void caseAMenorIgualExp(AMenorIgualExp node);
    void caseAMaiorIgualExp(AMaiorIgualExp node);
    void caseAMenorExp(AMenorExp node);
    void caseAMaiorExp(AMaiorExp node);
    void caseANegacaoExp(ANegacaoExp node);
    void caseAAndExp(AAndExp node);
    void caseAOrExp(AOrExp node);
    void caseAFatorOpcao(AFatorOpcao node);
    void caseASomaOpcao(ASomaOpcao node);
    void caseASubOpcao(ASubOpcao node);
    void caseATermoFator(ATermoFator node);
    void caseAMultFator(AMultFator node);
    void caseADivFator(ADivFator node);
    void caseAVarTermo(AVarTermo node);
    void caseAVariavelTermo(AVariavelTermo node);
    void caseAPrioridadeTermo(APrioridadeTermo node);
    void caseACallingTermo(ACallingTermo node);
    void caseANumInteiroVariavel(ANumInteiroVariavel node);
    void caseANumRealVariavel(ANumRealVariavel node);
    void caseACaractereVariavel(ACaractereVariavel node);
    void caseABoolSimVariavel(ABoolSimVariavel node);
    void caseABoolNaoVariavel(ABoolNaoVariavel node);
    void caseAStringVariavel(AStringVariavel node);
    void caseADecFuncao(ADecFuncao node);
    void caseATipoTipoRetorno(ATipoTipoRetorno node);
    void caseANadaTipoRetorno(ANadaTipoRetorno node);
    void caseABloco(ABloco node);
    void caseAParametros(AParametros node);
    void caseAParam(AParam node);
    void caseAParamAux(AParamAux node);
    void caseAParametro(AParametro node);
    void caseASemicolon(ASemicolon node);
    void caseASeComando(ASeComando node);
    void caseAEnquantoComando(AEnquantoComando node);
    void caseAArrodeieComando(AArrodeieComando node);
    void caseAMandeDeVoltaComando(AMandeDeVoltaComando node);
    void caseAAtribuicaoComando(AAtribuicaoComando node);
    void caseABlocoComando(ABlocoComando node);
    void caseAChamadaComando(AChamadaComando node);
    void caseAListaNomes(AListaNomes node);
    void caseAIdAux(AIdAux node);
    void caseAAtribuicao(AAtribuicao node);
    void caseAListaAtrib(AListaAtrib node);
    void caseAAtribAux(AAtribAux node);
    void caseAIdVar(AIdVar node);
    void caseAVarExpVar(AVarExpVar node);
    void caseAChamada(AChamada node);
    void caseAListaExp(AListaExp node);
    void caseAExpAux(AExpAux node);

    void caseTNumInteiro(TNumInteiro node);
    void caseTNumReal(TNumReal node);
    void caseTNumero(TNumero node);
    void caseTCaractere(TCaractere node);
    void caseTPulaLinha(TPulaLinha node);
    void caseTTabulacao(TTabulacao node);
    void caseTString(TString node);
    void caseTLinhaComent(TLinhaComent node);
    void caseTBoxComent(TBoxComent node);
    void caseTSoma(TSoma node);
    void caseTSubt(TSubt node);
    void caseTMult(TMult node);
    void caseTDiv(TDiv node);
    void caseTAtrib(TAtrib node);
    void caseTSepParam(TSepParam node);
    void caseTParEsq(TParEsq node);
    void caseTParDir(TParDir node);
    void caseTColEsq(TColEsq node);
    void caseTColDir(TColDir node);
    void caseTMenor(TMenor node);
    void caseTMaior(TMaior node);
    void caseTIgual(TIgual node);
    void caseTMenorIg(TMenorIg node);
    void caseTMaiorIg(TMaiorIg node);
    void caseTPtVirgula(TPtVirgula node);
    void caseTDoisPt(TDoisPt node);
    void caseTVirgula(TVirgula node);
    void caseTInt(TInt node);
    void caseTFloat(TFloat node);
    void caseTChar(TChar node);
    void caseTBool(TBool node);
    void caseTNada(TNada node);
    void caseTOr(TOr node);
    void caseTNot(TNot node);
    void caseTAnd(TAnd node);
    void caseTIf(TIf node);
    void caseTElse(TElse node);
    void caseTFor(TFor node);
    void caseTWhile(TWhile node);
    void caseTRepeat(TRepeat node);
    void caseTRuma(TRuma node);
    void caseTDe(TDe node);
    void caseTMande(TMande node);
    void caseTVolta(TVolta node);
    void caseTArrume(TArrume node);
    void caseTAssim(TAssim node);
    void caseTInicio(TInicio node);
    void caseTFim(TFim node);
    void caseTSim(TSim node);
    void caseTNao(TNao node);
    void caseTId(TId node);
    void caseTVazio(TVazio node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
