/* This file was generated by SableCC (http://www.sablecc.org/). */

package cordel.analysis;

import java.util.*;
import cordel.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPPrograma().apply(this);
        outStart(node);
    }

    public void inAPrograma(APrograma node)
    {
        defaultIn(node);
    }

    public void outAPrograma(APrograma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrograma(APrograma node)
    {
        inAPrograma(node);
        {
            List<PDecOrDef> copy = new ArrayList<PDecOrDef>(node.getDecOrDef());
            Collections.reverse(copy);
            for(PDecOrDef e : copy)
            {
                e.apply(this);
            }
        }
        outAPrograma(node);
    }

    public void inADecVariavelDecOrDef(ADecVariavelDecOrDef node)
    {
        defaultIn(node);
    }

    public void outADecVariavelDecOrDef(ADecVariavelDecOrDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecVariavelDecOrDef(ADecVariavelDecOrDef node)
    {
        inADecVariavelDecOrDef(node);
        if(node.getDecVariavel() != null)
        {
            node.getDecVariavel().apply(this);
        }
        outADecVariavelDecOrDef(node);
    }

    public void inADecFuncaoDecOrDef(ADecFuncaoDecOrDef node)
    {
        defaultIn(node);
    }

    public void outADecFuncaoDecOrDef(ADecFuncaoDecOrDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecFuncaoDecOrDef(ADecFuncaoDecOrDef node)
    {
        inADecFuncaoDecOrDef(node);
        if(node.getDecFuncao() != null)
        {
            node.getDecFuncao().apply(this);
        }
        outADecFuncaoDecOrDef(node);
    }

    public void inADecVariavel(ADecVariavel node)
    {
        defaultIn(node);
    }

    public void outADecVariavel(ADecVariavel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecVariavel(ADecVariavel node)
    {
        inADecVariavel(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getListaNomes() != null)
        {
            node.getListaNomes().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        outADecVariavel(node);
    }

    public void inATipoTipo(ATipoTipo node)
    {
        defaultIn(node);
    }

    public void outATipoTipo(ATipoTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoTipo(ATipoTipo node)
    {
        inATipoTipo(node);
        if(node.getTipoBase() != null)
        {
            node.getTipoBase().apply(this);
        }
        outATipoTipo(node);
    }

    public void inAVetorTipo(AVetorTipo node)
    {
        defaultIn(node);
    }

    public void outAVetorTipo(AVetorTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVetorTipo(AVetorTipo node)
    {
        inAVetorTipo(node);
        if(node.getColDir() != null)
        {
            node.getColDir().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getColEsq() != null)
        {
            node.getColEsq().apply(this);
        }
        if(node.getTipoBase() != null)
        {
            node.getTipoBase().apply(this);
        }
        if(node.getDe() != null)
        {
            node.getDe().apply(this);
        }
        if(node.getRuma() != null)
        {
            node.getRuma().apply(this);
        }
        outAVetorTipo(node);
    }

    public void inAIntTipoBase(AIntTipoBase node)
    {
        defaultIn(node);
    }

    public void outAIntTipoBase(AIntTipoBase node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntTipoBase(AIntTipoBase node)
    {
        inAIntTipoBase(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        outAIntTipoBase(node);
    }

    public void inACaractereTipoBase(ACaractereTipoBase node)
    {
        defaultIn(node);
    }

    public void outACaractereTipoBase(ACaractereTipoBase node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACaractereTipoBase(ACaractereTipoBase node)
    {
        inACaractereTipoBase(node);
        if(node.getChar() != null)
        {
            node.getChar().apply(this);
        }
        outACaractereTipoBase(node);
    }

    public void inAFloatTipoBase(AFloatTipoBase node)
    {
        defaultIn(node);
    }

    public void outAFloatTipoBase(AFloatTipoBase node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFloatTipoBase(AFloatTipoBase node)
    {
        inAFloatTipoBase(node);
        if(node.getFloat() != null)
        {
            node.getFloat().apply(this);
        }
        outAFloatTipoBase(node);
    }

    public void inABoolTipoBase(ABoolTipoBase node)
    {
        defaultIn(node);
    }

    public void outABoolTipoBase(ABoolTipoBase node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolTipoBase(ABoolTipoBase node)
    {
        inABoolTipoBase(node);
        if(node.getBool() != null)
        {
            node.getBool().apply(this);
        }
        outABoolTipoBase(node);
    }

    public void inAOpcaoExp(AOpcaoExp node)
    {
        defaultIn(node);
    }

    public void outAOpcaoExp(AOpcaoExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpcaoExp(AOpcaoExp node)
    {
        inAOpcaoExp(node);
        if(node.getOpcao() != null)
        {
            node.getOpcao().apply(this);
        }
        outAOpcaoExp(node);
    }

    public void inAIgualExp(AIgualExp node)
    {
        defaultIn(node);
    }

    public void outAIgualExp(AIgualExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIgualExp(AIgualExp node)
    {
        inAIgualExp(node);
        if(node.getOpcao() != null)
        {
            node.getOpcao().apply(this);
        }
        if(node.getIgual() != null)
        {
            node.getIgual().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAIgualExp(node);
    }

    public void inAMenorIgualExp(AMenorIgualExp node)
    {
        defaultIn(node);
    }

    public void outAMenorIgualExp(AMenorIgualExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorIgualExp(AMenorIgualExp node)
    {
        inAMenorIgualExp(node);
        if(node.getOpcao() != null)
        {
            node.getOpcao().apply(this);
        }
        if(node.getMenorIg() != null)
        {
            node.getMenorIg().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAMenorIgualExp(node);
    }

    public void inAMaiorIgualExp(AMaiorIgualExp node)
    {
        defaultIn(node);
    }

    public void outAMaiorIgualExp(AMaiorIgualExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorIgualExp(AMaiorIgualExp node)
    {
        inAMaiorIgualExp(node);
        if(node.getOpcao() != null)
        {
            node.getOpcao().apply(this);
        }
        if(node.getMaiorIg() != null)
        {
            node.getMaiorIg().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAMaiorIgualExp(node);
    }

    public void inAMenorExp(AMenorExp node)
    {
        defaultIn(node);
    }

    public void outAMenorExp(AMenorExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorExp(AMenorExp node)
    {
        inAMenorExp(node);
        if(node.getOpcao() != null)
        {
            node.getOpcao().apply(this);
        }
        if(node.getMenor() != null)
        {
            node.getMenor().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAMenorExp(node);
    }

    public void inAMaiorExp(AMaiorExp node)
    {
        defaultIn(node);
    }

    public void outAMaiorExp(AMaiorExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorExp(AMaiorExp node)
    {
        inAMaiorExp(node);
        if(node.getOpcao() != null)
        {
            node.getOpcao().apply(this);
        }
        if(node.getMaior() != null)
        {
            node.getMaior().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAMaiorExp(node);
    }

    public void inANegacaoExp(ANegacaoExp node)
    {
        defaultIn(node);
    }

    public void outANegacaoExp(ANegacaoExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegacaoExp(ANegacaoExp node)
    {
        inANegacaoExp(node);
        if(node.getOpcao() != null)
        {
            node.getOpcao().apply(this);
        }
        if(node.getNot() != null)
        {
            node.getNot().apply(this);
        }
        outANegacaoExp(node);
    }

    public void inAAndExp(AAndExp node)
    {
        defaultIn(node);
    }

    public void outAAndExp(AAndExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndExp(AAndExp node)
    {
        inAAndExp(node);
        if(node.getOpcao() != null)
        {
            node.getOpcao().apply(this);
        }
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAAndExp(node);
    }

    public void inAOrExp(AOrExp node)
    {
        defaultIn(node);
    }

    public void outAOrExp(AOrExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrExp(AOrExp node)
    {
        inAOrExp(node);
        if(node.getOpcao() != null)
        {
            node.getOpcao().apply(this);
        }
        if(node.getOr() != null)
        {
            node.getOr().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAOrExp(node);
    }

    public void inAFatorOpcao(AFatorOpcao node)
    {
        defaultIn(node);
    }

    public void outAFatorOpcao(AFatorOpcao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFatorOpcao(AFatorOpcao node)
    {
        inAFatorOpcao(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        outAFatorOpcao(node);
    }

    public void inASomaOpcao(ASomaOpcao node)
    {
        defaultIn(node);
    }

    public void outASomaOpcao(ASomaOpcao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASomaOpcao(ASomaOpcao node)
    {
        inASomaOpcao(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        if(node.getSoma() != null)
        {
            node.getSoma().apply(this);
        }
        if(node.getOpcao() != null)
        {
            node.getOpcao().apply(this);
        }
        outASomaOpcao(node);
    }

    public void inASubOpcao(ASubOpcao node)
    {
        defaultIn(node);
    }

    public void outASubOpcao(ASubOpcao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubOpcao(ASubOpcao node)
    {
        inASubOpcao(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        if(node.getSubt() != null)
        {
            node.getSubt().apply(this);
        }
        if(node.getOpcao() != null)
        {
            node.getOpcao().apply(this);
        }
        outASubOpcao(node);
    }

    public void inATermoFator(ATermoFator node)
    {
        defaultIn(node);
    }

    public void outATermoFator(ATermoFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermoFator(ATermoFator node)
    {
        inATermoFator(node);
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outATermoFator(node);
    }

    public void inAMultFator(AMultFator node)
    {
        defaultIn(node);
    }

    public void outAMultFator(AMultFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultFator(AMultFator node)
    {
        inAMultFator(node);
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        outAMultFator(node);
    }

    public void inADivFator(ADivFator node)
    {
        defaultIn(node);
    }

    public void outADivFator(ADivFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivFator(ADivFator node)
    {
        inADivFator(node);
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        outADivFator(node);
    }

    public void inAVarTermo(AVarTermo node)
    {
        defaultIn(node);
    }

    public void outAVarTermo(AVarTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarTermo(AVarTermo node)
    {
        inAVarTermo(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAVarTermo(node);
    }

    public void inAVariavelTermo(AVariavelTermo node)
    {
        defaultIn(node);
    }

    public void outAVariavelTermo(AVariavelTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariavelTermo(AVariavelTermo node)
    {
        inAVariavelTermo(node);
        if(node.getVariavel() != null)
        {
            node.getVariavel().apply(this);
        }
        outAVariavelTermo(node);
    }

    public void inAPrioridadeTermo(APrioridadeTermo node)
    {
        defaultIn(node);
    }

    public void outAPrioridadeTermo(APrioridadeTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrioridadeTermo(APrioridadeTermo node)
    {
        inAPrioridadeTermo(node);
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        outAPrioridadeTermo(node);
    }

    public void inACallingTermo(ACallingTermo node)
    {
        defaultIn(node);
    }

    public void outACallingTermo(ACallingTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACallingTermo(ACallingTermo node)
    {
        inACallingTermo(node);
        if(node.getChamada() != null)
        {
            node.getChamada().apply(this);
        }
        outACallingTermo(node);
    }

    public void inANumInteiroVariavel(ANumInteiroVariavel node)
    {
        defaultIn(node);
    }

    public void outANumInteiroVariavel(ANumInteiroVariavel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumInteiroVariavel(ANumInteiroVariavel node)
    {
        inANumInteiroVariavel(node);
        if(node.getNumInteiro() != null)
        {
            node.getNumInteiro().apply(this);
        }
        outANumInteiroVariavel(node);
    }

    public void inANumRealVariavel(ANumRealVariavel node)
    {
        defaultIn(node);
    }

    public void outANumRealVariavel(ANumRealVariavel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumRealVariavel(ANumRealVariavel node)
    {
        inANumRealVariavel(node);
        if(node.getNumReal() != null)
        {
            node.getNumReal().apply(this);
        }
        outANumRealVariavel(node);
    }

    public void inACaractereVariavel(ACaractereVariavel node)
    {
        defaultIn(node);
    }

    public void outACaractereVariavel(ACaractereVariavel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACaractereVariavel(ACaractereVariavel node)
    {
        inACaractereVariavel(node);
        if(node.getCaractere() != null)
        {
            node.getCaractere().apply(this);
        }
        outACaractereVariavel(node);
    }

    public void inABoolSimVariavel(ABoolSimVariavel node)
    {
        defaultIn(node);
    }

    public void outABoolSimVariavel(ABoolSimVariavel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolSimVariavel(ABoolSimVariavel node)
    {
        inABoolSimVariavel(node);
        if(node.getSim() != null)
        {
            node.getSim().apply(this);
        }
        outABoolSimVariavel(node);
    }

    public void inABoolNaoVariavel(ABoolNaoVariavel node)
    {
        defaultIn(node);
    }

    public void outABoolNaoVariavel(ABoolNaoVariavel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolNaoVariavel(ABoolNaoVariavel node)
    {
        inABoolNaoVariavel(node);
        if(node.getNao() != null)
        {
            node.getNao().apply(this);
        }
        outABoolNaoVariavel(node);
    }

    public void inAStringVariavel(AStringVariavel node)
    {
        defaultIn(node);
    }

    public void outAStringVariavel(AStringVariavel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringVariavel(AStringVariavel node)
    {
        inAStringVariavel(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringVariavel(node);
    }

    public void inADecFuncao(ADecFuncao node)
    {
        defaultIn(node);
    }

    public void outADecFuncao(ADecFuncao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecFuncao(ADecFuncao node)
    {
        inADecFuncao(node);
        if(node.getBloco() != null)
        {
            node.getBloco().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getParametros() != null)
        {
            node.getParametros().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getDoisPt() != null)
        {
            node.getDoisPt().apply(this);
        }
        if(node.getAssim() != null)
        {
            node.getAssim().apply(this);
        }
        if(node.getTipoRetorno() != null)
        {
            node.getTipoRetorno().apply(this);
        }
        if(node.getArrume() != null)
        {
            node.getArrume().apply(this);
        }
        outADecFuncao(node);
    }

    public void inATipoTipoRetorno(ATipoTipoRetorno node)
    {
        defaultIn(node);
    }

    public void outATipoTipoRetorno(ATipoTipoRetorno node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoTipoRetorno(ATipoTipoRetorno node)
    {
        inATipoTipoRetorno(node);
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        outATipoTipoRetorno(node);
    }

    public void inANadaTipoRetorno(ANadaTipoRetorno node)
    {
        defaultIn(node);
    }

    public void outANadaTipoRetorno(ANadaTipoRetorno node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANadaTipoRetorno(ANadaTipoRetorno node)
    {
        inANadaTipoRetorno(node);
        if(node.getNada() != null)
        {
            node.getNada().apply(this);
        }
        outANadaTipoRetorno(node);
    }

    public void inABloco(ABloco node)
    {
        defaultIn(node);
    }

    public void outABloco(ABloco node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABloco(ABloco node)
    {
        inABloco(node);
        if(node.getFim() != null)
        {
            node.getFim().apply(this);
        }
        {
            List<PComando> copy = new ArrayList<PComando>(node.getComando());
            Collections.reverse(copy);
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PDecVariavel> copy = new ArrayList<PDecVariavel>(node.getDecVariavel());
            Collections.reverse(copy);
            for(PDecVariavel e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getInicio() != null)
        {
            node.getInicio().apply(this);
        }
        outABloco(node);
    }

    public void inAParametros(AParametros node)
    {
        defaultIn(node);
    }

    public void outAParametros(AParametros node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParametros(AParametros node)
    {
        inAParametros(node);
        if(node.getParam() != null)
        {
            node.getParam().apply(this);
        }
        outAParametros(node);
    }

    public void inAParam(AParam node)
    {
        defaultIn(node);
    }

    public void outAParam(AParam node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParam(AParam node)
    {
        inAParam(node);
        {
            List<PParamAux> copy = new ArrayList<PParamAux>(node.getParamAux());
            Collections.reverse(copy);
            for(PParamAux e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getParametro() != null)
        {
            node.getParametro().apply(this);
        }
        outAParam(node);
    }

    public void inAParamAux(AParamAux node)
    {
        defaultIn(node);
    }

    public void outAParamAux(AParamAux node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParamAux(AParamAux node)
    {
        inAParamAux(node);
        if(node.getParametro() != null)
        {
            node.getParametro().apply(this);
        }
        if(node.getSepParam() != null)
        {
            node.getSepParam().apply(this);
        }
        outAParamAux(node);
    }

    public void inAParametro(AParametro node)
    {
        defaultIn(node);
    }

    public void outAParametro(AParametro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParametro(AParametro node)
    {
        inAParametro(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        outAParametro(node);
    }

    public void inASemicolon(ASemicolon node)
    {
        defaultIn(node);
    }

    public void outASemicolon(ASemicolon node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASemicolon(ASemicolon node)
    {
        inASemicolon(node);
        if(node.getPtVirgula() != null)
        {
            node.getPtVirgula().apply(this);
        }
        outASemicolon(node);
    }

    public void inASeComando(ASeComando node)
    {
        defaultIn(node);
    }

    public void outASeComando(ASeComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeComando(ASeComando node)
    {
        inASeComando(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        outASeComando(node);
    }

    public void inAEnquantoComando(AEnquantoComando node)
    {
        defaultIn(node);
    }

    public void outAEnquantoComando(AEnquantoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnquantoComando(AEnquantoComando node)
    {
        inAEnquantoComando(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getRepeat() != null)
        {
            node.getRepeat().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        outAEnquantoComando(node);
    }

    public void inAArrodeieComando(AArrodeieComando node)
    {
        defaultIn(node);
    }

    public void outAArrodeieComando(AArrodeieComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrodeieComando(AArrodeieComando node)
    {
        inAArrodeieComando(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getIncr() != null)
        {
            node.getIncr().apply(this);
        }
        if(node.getS2() != null)
        {
            node.getS2().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getS1() != null)
        {
            node.getS1().apply(this);
        }
        if(node.getInit() != null)
        {
            node.getInit().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getFor() != null)
        {
            node.getFor().apply(this);
        }
        outAArrodeieComando(node);
    }

    public void inAMandeDeVoltaComando(AMandeDeVoltaComando node)
    {
        defaultIn(node);
    }

    public void outAMandeDeVoltaComando(AMandeDeVoltaComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMandeDeVoltaComando(AMandeDeVoltaComando node)
    {
        inAMandeDeVoltaComando(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getVolta() != null)
        {
            node.getVolta().apply(this);
        }
        if(node.getDe() != null)
        {
            node.getDe().apply(this);
        }
        if(node.getMande() != null)
        {
            node.getMande().apply(this);
        }
        outAMandeDeVoltaComando(node);
    }

    public void inAAtribuicaoComando(AAtribuicaoComando node)
    {
        defaultIn(node);
    }

    public void outAAtribuicaoComando(AAtribuicaoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtribuicaoComando(AAtribuicaoComando node)
    {
        inAAtribuicaoComando(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getAtribuicao() != null)
        {
            node.getAtribuicao().apply(this);
        }
        outAAtribuicaoComando(node);
    }

    public void inABlocoComando(ABlocoComando node)
    {
        defaultIn(node);
    }

    public void outABlocoComando(ABlocoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoComando(ABlocoComando node)
    {
        inABlocoComando(node);
        if(node.getBloco() != null)
        {
            node.getBloco().apply(this);
        }
        outABlocoComando(node);
    }

    public void inAChamadaComando(AChamadaComando node)
    {
        defaultIn(node);
    }

    public void outAChamadaComando(AChamadaComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChamadaComando(AChamadaComando node)
    {
        inAChamadaComando(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getChamada() != null)
        {
            node.getChamada().apply(this);
        }
        outAChamadaComando(node);
    }

    public void inAListaNomes(AListaNomes node)
    {
        defaultIn(node);
    }

    public void outAListaNomes(AListaNomes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaNomes(AListaNomes node)
    {
        inAListaNomes(node);
        {
            List<PIdAux> copy = new ArrayList<PIdAux>(node.getIdAux());
            Collections.reverse(copy);
            for(PIdAux e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAListaNomes(node);
    }

    public void inAIdAux(AIdAux node)
    {
        defaultIn(node);
    }

    public void outAIdAux(AIdAux node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdAux(AIdAux node)
    {
        inAIdAux(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        outAIdAux(node);
    }

    public void inAAtribuicao(AAtribuicao node)
    {
        defaultIn(node);
    }

    public void outAAtribuicao(AAtribuicao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtribuicao(AAtribuicao node)
    {
        inAAtribuicao(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getAtrib() != null)
        {
            node.getAtrib().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAAtribuicao(node);
    }

    public void inAListaAtrib(AListaAtrib node)
    {
        defaultIn(node);
    }

    public void outAListaAtrib(AListaAtrib node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaAtrib(AListaAtrib node)
    {
        inAListaAtrib(node);
        {
            List<PAtribAux> copy = new ArrayList<PAtribAux>(node.getAtribAux());
            Collections.reverse(copy);
            for(PAtribAux e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getAtribuicao() != null)
        {
            node.getAtribuicao().apply(this);
        }
        outAListaAtrib(node);
    }

    public void inAAtribAux(AAtribAux node)
    {
        defaultIn(node);
    }

    public void outAAtribAux(AAtribAux node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtribAux(AAtribAux node)
    {
        inAAtribAux(node);
        if(node.getAtribuicao() != null)
        {
            node.getAtribuicao().apply(this);
        }
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        outAAtribAux(node);
    }

    public void inAIdVar(AIdVar node)
    {
        defaultIn(node);
    }

    public void outAIdVar(AIdVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdVar(AIdVar node)
    {
        inAIdVar(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdVar(node);
    }

    public void inAVarExpVar(AVarExpVar node)
    {
        defaultIn(node);
    }

    public void outAVarExpVar(AVarExpVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarExpVar(AVarExpVar node)
    {
        inAVarExpVar(node);
        if(node.getColDir() != null)
        {
            node.getColDir().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getColEsq() != null)
        {
            node.getColEsq().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAVarExpVar(node);
    }

    public void inAChamada(AChamada node)
    {
        defaultIn(node);
    }

    public void outAChamada(AChamada node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChamada(AChamada node)
    {
        inAChamada(node);
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getListaExp() != null)
        {
            node.getListaExp().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAChamada(node);
    }

    public void inAListaExp(AListaExp node)
    {
        defaultIn(node);
    }

    public void outAListaExp(AListaExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaExp(AListaExp node)
    {
        inAListaExp(node);
        {
            List<PExpAux> copy = new ArrayList<PExpAux>(node.getExpAux());
            Collections.reverse(copy);
            for(PExpAux e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAListaExp(node);
    }

    public void inAExpAux(AExpAux node)
    {
        defaultIn(node);
    }

    public void outAExpAux(AExpAux node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpAux(AExpAux node)
    {
        inAExpAux(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getSepParam() != null)
        {
            node.getSepParam().apply(this);
        }
        outAExpAux(node);
    }
}
