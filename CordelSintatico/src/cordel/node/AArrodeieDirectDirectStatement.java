/* This file was generated by SableCC (http://www.sablecc.org/). */

package cordel.node;

import cordel.analysis.*;

@SuppressWarnings("nls")
public final class AArrodeieDirectDirectStatement extends PDirectStatement
{
    private TFor _for_;
    private TParEsq _parEsq_;
    private PListaAtrib _init_;
    private TPtVirgula _s1_;
    private PExp _exp_;
    private TPtVirgula _s2_;
    private PListaAtrib _incr_;
    private TParDir _parDir_;
    private PDirectStatement _directStatement_;

    public AArrodeieDirectDirectStatement()
    {
        // Constructor
    }

    public AArrodeieDirectDirectStatement(
        @SuppressWarnings("hiding") TFor _for_,
        @SuppressWarnings("hiding") TParEsq _parEsq_,
        @SuppressWarnings("hiding") PListaAtrib _init_,
        @SuppressWarnings("hiding") TPtVirgula _s1_,
        @SuppressWarnings("hiding") PExp _exp_,
        @SuppressWarnings("hiding") TPtVirgula _s2_,
        @SuppressWarnings("hiding") PListaAtrib _incr_,
        @SuppressWarnings("hiding") TParDir _parDir_,
        @SuppressWarnings("hiding") PDirectStatement _directStatement_)
    {
        // Constructor
        setFor(_for_);

        setParEsq(_parEsq_);

        setInit(_init_);

        setS1(_s1_);

        setExp(_exp_);

        setS2(_s2_);

        setIncr(_incr_);

        setParDir(_parDir_);

        setDirectStatement(_directStatement_);

    }

    @Override
    public Object clone()
    {
        return new AArrodeieDirectDirectStatement(
            cloneNode(this._for_),
            cloneNode(this._parEsq_),
            cloneNode(this._init_),
            cloneNode(this._s1_),
            cloneNode(this._exp_),
            cloneNode(this._s2_),
            cloneNode(this._incr_),
            cloneNode(this._parDir_),
            cloneNode(this._directStatement_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAArrodeieDirectDirectStatement(this);
    }

    public TFor getFor()
    {
        return this._for_;
    }

    public void setFor(TFor node)
    {
        if(this._for_ != null)
        {
            this._for_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._for_ = node;
    }

    public TParEsq getParEsq()
    {
        return this._parEsq_;
    }

    public void setParEsq(TParEsq node)
    {
        if(this._parEsq_ != null)
        {
            this._parEsq_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._parEsq_ = node;
    }

    public PListaAtrib getInit()
    {
        return this._init_;
    }

    public void setInit(PListaAtrib node)
    {
        if(this._init_ != null)
        {
            this._init_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._init_ = node;
    }

    public TPtVirgula getS1()
    {
        return this._s1_;
    }

    public void setS1(TPtVirgula node)
    {
        if(this._s1_ != null)
        {
            this._s1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._s1_ = node;
    }

    public PExp getExp()
    {
        return this._exp_;
    }

    public void setExp(PExp node)
    {
        if(this._exp_ != null)
        {
            this._exp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exp_ = node;
    }

    public TPtVirgula getS2()
    {
        return this._s2_;
    }

    public void setS2(TPtVirgula node)
    {
        if(this._s2_ != null)
        {
            this._s2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._s2_ = node;
    }

    public PListaAtrib getIncr()
    {
        return this._incr_;
    }

    public void setIncr(PListaAtrib node)
    {
        if(this._incr_ != null)
        {
            this._incr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._incr_ = node;
    }

    public TParDir getParDir()
    {
        return this._parDir_;
    }

    public void setParDir(TParDir node)
    {
        if(this._parDir_ != null)
        {
            this._parDir_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._parDir_ = node;
    }

    public PDirectStatement getDirectStatement()
    {
        return this._directStatement_;
    }

    public void setDirectStatement(PDirectStatement node)
    {
        if(this._directStatement_ != null)
        {
            this._directStatement_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._directStatement_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._for_)
            + toString(this._parEsq_)
            + toString(this._init_)
            + toString(this._s1_)
            + toString(this._exp_)
            + toString(this._s2_)
            + toString(this._incr_)
            + toString(this._parDir_)
            + toString(this._directStatement_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._for_ == child)
        {
            this._for_ = null;
            return;
        }

        if(this._parEsq_ == child)
        {
            this._parEsq_ = null;
            return;
        }

        if(this._init_ == child)
        {
            this._init_ = null;
            return;
        }

        if(this._s1_ == child)
        {
            this._s1_ = null;
            return;
        }

        if(this._exp_ == child)
        {
            this._exp_ = null;
            return;
        }

        if(this._s2_ == child)
        {
            this._s2_ = null;
            return;
        }

        if(this._incr_ == child)
        {
            this._incr_ = null;
            return;
        }

        if(this._parDir_ == child)
        {
            this._parDir_ = null;
            return;
        }

        if(this._directStatement_ == child)
        {
            this._directStatement_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._for_ == oldChild)
        {
            setFor((TFor) newChild);
            return;
        }

        if(this._parEsq_ == oldChild)
        {
            setParEsq((TParEsq) newChild);
            return;
        }

        if(this._init_ == oldChild)
        {
            setInit((PListaAtrib) newChild);
            return;
        }

        if(this._s1_ == oldChild)
        {
            setS1((TPtVirgula) newChild);
            return;
        }

        if(this._exp_ == oldChild)
        {
            setExp((PExp) newChild);
            return;
        }

        if(this._s2_ == oldChild)
        {
            setS2((TPtVirgula) newChild);
            return;
        }

        if(this._incr_ == oldChild)
        {
            setIncr((PListaAtrib) newChild);
            return;
        }

        if(this._parDir_ == oldChild)
        {
            setParDir((TParDir) newChild);
            return;
        }

        if(this._directStatement_ == oldChild)
        {
            setDirectStatement((PDirectStatement) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
