/* This file was generated by SableCC (http://www.sablecc.org/). */

package cordel.parser;

import cordel.lexer.*;
import cordel.node.*;
import cordel.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PAPrograma node1 = (PAPrograma) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AAprograma1Programa */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list);
            }
            break;
            case 1: /* reduce AAprograma2Programa */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list);
            }
            break;
            case 2: /* reduce AAprograma3Programa */
            {
                ArrayList<Object> list = new2();
                push(goTo(0), list);
            }
            break;
            case 3: /* reduce AAprograma4Programa */
            {
                ArrayList<Object> list = new3();
                push(goTo(0), list);
            }
            break;
            case 4: /* reduce AAdecvariavel1DecVariavel */
            {
                ArrayList<Object> list = new4();
                push(goTo(1), list);
            }
            break;
            case 5: /* reduce AAdecvariavel2DecVariavel */
            {
                ArrayList<Object> list = new5();
                push(goTo(1), list);
            }
            break;
            case 6: /* reduce AIdAux */
            {
                ArrayList<Object> list = new6();
                push(goTo(2), list);
            }
            break;
            case 7: /* reduce ATipoTipo */
            {
                ArrayList<Object> list = new7();
                push(goTo(3), list);
            }
            break;
            case 8: /* reduce AVetorTipo */
            {
                ArrayList<Object> list = new8();
                push(goTo(3), list);
            }
            break;
            case 9: /* reduce AIntTipoBase */
            {
                ArrayList<Object> list = new9();
                push(goTo(4), list);
            }
            break;
            case 10: /* reduce ACaractereTipoBase */
            {
                ArrayList<Object> list = new10();
                push(goTo(4), list);
            }
            break;
            case 11: /* reduce AFloatTipoBase */
            {
                ArrayList<Object> list = new11();
                push(goTo(4), list);
            }
            break;
            case 12: /* reduce ABoolTipoBase */
            {
                ArrayList<Object> list = new12();
                push(goTo(4), list);
            }
            break;
            case 13: /* reduce AOpcaoExp */
            {
                ArrayList<Object> list = new13();
                push(goTo(5), list);
            }
            break;
            case 14: /* reduce AIgualExp */
            {
                ArrayList<Object> list = new14();
                push(goTo(5), list);
            }
            break;
            case 15: /* reduce AMenorIgualExp */
            {
                ArrayList<Object> list = new15();
                push(goTo(5), list);
            }
            break;
            case 16: /* reduce AMaiorIgualExp */
            {
                ArrayList<Object> list = new16();
                push(goTo(5), list);
            }
            break;
            case 17: /* reduce AMenorExp */
            {
                ArrayList<Object> list = new17();
                push(goTo(5), list);
            }
            break;
            case 18: /* reduce AMaiorExp */
            {
                ArrayList<Object> list = new18();
                push(goTo(5), list);
            }
            break;
            case 19: /* reduce ANegacaoExp */
            {
                ArrayList<Object> list = new19();
                push(goTo(5), list);
            }
            break;
            case 20: /* reduce AAndExp */
            {
                ArrayList<Object> list = new20();
                push(goTo(5), list);
            }
            break;
            case 21: /* reduce AOrExp */
            {
                ArrayList<Object> list = new21();
                push(goTo(5), list);
            }
            break;
            case 22: /* reduce AFatorOpcao */
            {
                ArrayList<Object> list = new22();
                push(goTo(6), list);
            }
            break;
            case 23: /* reduce ASomaOpcao */
            {
                ArrayList<Object> list = new23();
                push(goTo(6), list);
            }
            break;
            case 24: /* reduce ASubOpcao */
            {
                ArrayList<Object> list = new24();
                push(goTo(6), list);
            }
            break;
            case 25: /* reduce ATermoFator */
            {
                ArrayList<Object> list = new25();
                push(goTo(7), list);
            }
            break;
            case 26: /* reduce AMultFator */
            {
                ArrayList<Object> list = new26();
                push(goTo(7), list);
            }
            break;
            case 27: /* reduce ADivFator */
            {
                ArrayList<Object> list = new27();
                push(goTo(7), list);
            }
            break;
            case 28: /* reduce AVarTermo */
            {
                ArrayList<Object> list = new28();
                push(goTo(8), list);
            }
            break;
            case 29: /* reduce AVariavelTermo */
            {
                ArrayList<Object> list = new29();
                push(goTo(8), list);
            }
            break;
            case 30: /* reduce APrioridadeTermo */
            {
                ArrayList<Object> list = new30();
                push(goTo(8), list);
            }
            break;
            case 31: /* reduce AChamadaTermo */
            {
                ArrayList<Object> list = new31();
                push(goTo(8), list);
            }
            break;
            case 32: /* reduce ANumInteiroVariavel */
            {
                ArrayList<Object> list = new32();
                push(goTo(9), list);
            }
            break;
            case 33: /* reduce ANumRealVariavel */
            {
                ArrayList<Object> list = new33();
                push(goTo(9), list);
            }
            break;
            case 34: /* reduce ACaractereVariavel */
            {
                ArrayList<Object> list = new34();
                push(goTo(9), list);
            }
            break;
            case 35: /* reduce ABoolSimVariavel */
            {
                ArrayList<Object> list = new35();
                push(goTo(9), list);
            }
            break;
            case 36: /* reduce ABoolNaoVariavel */
            {
                ArrayList<Object> list = new36();
                push(goTo(9), list);
            }
            break;
            case 37: /* reduce AStringVariavel */
            {
                ArrayList<Object> list = new37();
                push(goTo(9), list);
            }
            break;
            case 38: /* reduce ADecFuncao */
            {
                ArrayList<Object> list = new38();
                push(goTo(10), list);
            }
            break;
            case 39: /* reduce ATipoTipoRetorno */
            {
                ArrayList<Object> list = new39();
                push(goTo(11), list);
            }
            break;
            case 40: /* reduce ANadaTipoRetorno */
            {
                ArrayList<Object> list = new40();
                push(goTo(11), list);
            }
            break;
            case 41: /* reduce AAbloco1Bloco */
            {
                ArrayList<Object> list = new41();
                push(goTo(12), list);
            }
            break;
            case 42: /* reduce AAbloco2Bloco */
            {
                ArrayList<Object> list = new42();
                push(goTo(12), list);
            }
            break;
            case 43: /* reduce AAbloco3Bloco */
            {
                ArrayList<Object> list = new43();
                push(goTo(12), list);
            }
            break;
            case 44: /* reduce AAbloco4Bloco */
            {
                ArrayList<Object> list = new44();
                push(goTo(12), list);
            }
            break;
            case 45: /* reduce AAparametros1Parametros */
            {
                ArrayList<Object> list = new45();
                push(goTo(13), list);
            }
            break;
            case 46: /* reduce AAparametros2Parametros */
            {
                ArrayList<Object> list = new46();
                push(goTo(13), list);
            }
            break;
            case 47: /* reduce AAparam1Param */
            {
                ArrayList<Object> list = new47();
                push(goTo(14), list);
            }
            break;
            case 48: /* reduce AAparam2Param */
            {
                ArrayList<Object> list = new48();
                push(goTo(14), list);
            }
            break;
            case 49: /* reduce AParamAux */
            {
                ArrayList<Object> list = new49();
                push(goTo(15), list);
            }
            break;
            case 50: /* reduce AParametro */
            {
                ArrayList<Object> list = new50();
                push(goTo(16), list);
            }
            break;
            case 51: /* reduce AStatementComando */
            {
                ArrayList<Object> list = new51();
                push(goTo(17), list);
            }
            break;
            case 52: /* reduce ADirectStatementComando */
            {
                ArrayList<Object> list = new52();
                push(goTo(17), list);
            }
            break;
            case 53: /* reduce ASeStatement */
            {
                ArrayList<Object> list = new53();
                push(goTo(18), list);
            }
            break;
            case 54: /* reduce ASeAbertoStatement */
            {
                ArrayList<Object> list = new54();
                push(goTo(18), list);
            }
            break;
            case 55: /* reduce ASeSenaoStatement */
            {
                ArrayList<Object> list = new55();
                push(goTo(18), list);
            }
            break;
            case 56: /* reduce AEnquantoStatement */
            {
                ArrayList<Object> list = new56();
                push(goTo(18), list);
            }
            break;
            case 57: /* reduce AArrodeieStatement */
            {
                ArrayList<Object> list = new57();
                push(goTo(18), list);
            }
            break;
            case 58: /* reduce ADirectStatement */
            {
                ArrayList<Object> list = new58();
                push(goTo(19), list);
            }
            break;
            case 59: /* reduce ASeSenaoDirectDirectStatement */
            {
                ArrayList<Object> list = new59();
                push(goTo(19), list);
            }
            break;
            case 60: /* reduce AEnquantoDirectDirectStatement */
            {
                ArrayList<Object> list = new60();
                push(goTo(19), list);
            }
            break;
            case 61: /* reduce AArrodeieDirectDirectStatement */
            {
                ArrayList<Object> list = new61();
                push(goTo(19), list);
            }
            break;
            case 62: /* reduce AMandeDeVoltaBasicStatement */
            {
                ArrayList<Object> list = new62();
                push(goTo(20), list);
            }
            break;
            case 63: /* reduce AAtribuicaoBasicStatement */
            {
                ArrayList<Object> list = new63();
                push(goTo(20), list);
            }
            break;
            case 64: /* reduce ABlocoBasicStatement */
            {
                ArrayList<Object> list = new64();
                push(goTo(20), list);
            }
            break;
            case 65: /* reduce AChamadaBasicStatement */
            {
                ArrayList<Object> list = new65();
                push(goTo(20), list);
            }
            break;
            case 66: /* reduce AAtribuicao */
            {
                ArrayList<Object> list = new66();
                push(goTo(21), list);
            }
            break;
            case 67: /* reduce AAlistaatrib1ListaAtrib */
            {
                ArrayList<Object> list = new67();
                push(goTo(22), list);
            }
            break;
            case 68: /* reduce AAlistaatrib2ListaAtrib */
            {
                ArrayList<Object> list = new68();
                push(goTo(22), list);
            }
            break;
            case 69: /* reduce AAtribAux */
            {
                ArrayList<Object> list = new69();
                push(goTo(23), list);
            }
            break;
            case 70: /* reduce AIdVar */
            {
                ArrayList<Object> list = new70();
                push(goTo(24), list);
            }
            break;
            case 71: /* reduce AVarExpVar */
            {
                ArrayList<Object> list = new71();
                push(goTo(24), list);
            }
            break;
            case 72: /* reduce AAchamada1Chamada */
            {
                ArrayList<Object> list = new72();
                push(goTo(25), list);
            }
            break;
            case 73: /* reduce AAchamada2Chamada */
            {
                ArrayList<Object> list = new73();
                push(goTo(25), list);
            }
            break;
            case 74: /* reduce AAlistaexp1ListaExp */
            {
                ArrayList<Object> list = new74();
                push(goTo(26), list);
            }
            break;
            case 75: /* reduce AAlistaexp2ListaExp */
            {
                ArrayList<Object> list = new75();
                push(goTo(26), list);
            }
            break;
            case 76: /* reduce AExpAux */
            {
                ArrayList<Object> list = new76();
                push(goTo(27), list);
            }
            break;
            case 77: /* reduce AIdentificador */
            {
                ArrayList<Object> list = new77();
                push(goTo(28), list);
            }
            break;
            case 78: /* reduce ATerminal$DecVariavel */
            {
                ArrayList<Object> list = new78();
                push(goTo(29), list);
            }
            break;
            case 79: /* reduce ANonTerminal$DecVariavel */
            {
                ArrayList<Object> list = new79();
                push(goTo(29), list);
            }
            break;
            case 80: /* reduce ATerminal$DecFuncao */
            {
                ArrayList<Object> list = new80();
                push(goTo(30), list);
            }
            break;
            case 81: /* reduce ANonTerminal$DecFuncao */
            {
                ArrayList<Object> list = new81();
                push(goTo(30), list);
            }
            break;
            case 82: /* reduce ATerminal$IdAux */
            {
                ArrayList<Object> list = new82();
                push(goTo(31), list);
            }
            break;
            case 83: /* reduce ANonTerminal$IdAux */
            {
                ArrayList<Object> list = new83();
                push(goTo(31), list);
            }
            break;
            case 84: /* reduce ATerminal$Comando */
            {
                ArrayList<Object> list = new84();
                push(goTo(32), list);
            }
            break;
            case 85: /* reduce ANonTerminal$Comando */
            {
                ArrayList<Object> list = new85();
                push(goTo(32), list);
            }
            break;
            case 86: /* reduce ATerminal$ParamAux */
            {
                ArrayList<Object> list = new86();
                push(goTo(33), list);
            }
            break;
            case 87: /* reduce ANonTerminal$ParamAux */
            {
                ArrayList<Object> list = new87();
                push(goTo(33), list);
            }
            break;
            case 88: /* reduce ATerminal$AtribAux */
            {
                ArrayList<Object> list = new88();
                push(goTo(34), list);
            }
            break;
            case 89: /* reduce ANonTerminal$AtribAux */
            {
                ArrayList<Object> list = new89();
                push(goTo(34), list);
            }
            break;
            case 90: /* reduce ATerminal$ExpAux */
            {
                ArrayList<Object> list = new90();
                push(goTo(35), list);
            }
            break;
            case 91: /* reduce ANonTerminal$ExpAux */
            {
                ArrayList<Object> list = new91();
                push(goTo(35), list);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AAprograma1Programa */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PAPrograma paprogramaNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        }
        {
            // Block
        }

        paprogramaNode1 = new AArProgramaAPrograma(listNode2, listNode3);
        }
	nodeList.add(paprogramaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAprograma2Programa */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAPrograma paprogramaNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        }

        paprogramaNode1 = new AArProgramaAPrograma(listNode3, listNode4);
        }
	nodeList.add(paprogramaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AAprograma3Programa */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAPrograma paprogramaNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList1.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        paprogramaNode1 = new AArProgramaAPrograma(listNode2, listNode4);
        }
	nodeList.add(paprogramaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AAprograma4Programa */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAPrograma paprogramaNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        paprogramaNode1 = new AArProgramaAPrograma(listNode3, listNode5);
        }
	nodeList.add(paprogramaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AAdecvariavel1DecVariavel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PADecVariavel padecvariavelNode1;
        {
            // Block
        PATipo patipoNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        patipoNode2 = (PATipo)nodeArrayList1.get(0);
        {
            // Block
        PAExp paexpNode3;
        paexpNode3 = (PAExp)nodeArrayList2.get(0);
	if(paexpNode3 != null)
	{
	  listNode4.add(paexpNode3);
	}
        }

        padecvariavelNode1 = new AArDecVariavelADecVariavel(patipoNode2, listNode4);
        }
	nodeList.add(padecvariavelNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AAdecvariavel2DecVariavel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PADecVariavel padecvariavelNode1;
        {
            // Block
        PATipo patipoNode2;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        patipoNode2 = (PATipo)nodeArrayList1.get(0);
        {
            // Block
        PAExp paexpNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        paexpNode3 = (PAExp)nodeArrayList2.get(0);
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(paexpNode3 != null)
	{
	  listNode5.add(paexpNode3);
	}
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        padecvariavelNode1 = new AArDecVariavelADecVariavel(patipoNode2, listNode5);
        }
	nodeList.add(padecvariavelNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AIdAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        paexpNode1 = (PAExp)nodeArrayList2.get(0);
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce ATipoTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PATipo patipoNode1;
        patipoNode1 = (PATipo)nodeArrayList1.get(0);
	nodeList.add(patipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AVetorTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PATipo patipoNode1;
        {
            // Block
        PATipo patipoNode2;
        PAExp paexpNode3;
        patipoNode2 = (PATipo)nodeArrayList3.get(0);
        paexpNode3 = (PAExp)nodeArrayList5.get(0);

        patipoNode1 = new AArVetorATipo(patipoNode2, paexpNode3);
        }
	nodeList.add(patipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AIntTipoBase */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PATipo patipoNode1;
        {
            // Block
        TInt tintNode2;
        tintNode2 = (TInt)nodeArrayList1.get(0);

        patipoNode1 = new AArInteiroATipo(tintNode2);
        }
	nodeList.add(patipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce ACaractereTipoBase */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PATipo patipoNode1;
        {
            // Block
        TChar tcharNode2;
        tcharNode2 = (TChar)nodeArrayList1.get(0);

        patipoNode1 = new AArCaractereATipo(tcharNode2);
        }
	nodeList.add(patipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AFloatTipoBase */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PATipo patipoNode1;
        {
            // Block
        TFloat tfloatNode2;
        tfloatNode2 = (TFloat)nodeArrayList1.get(0);

        patipoNode1 = new AArFloatATipo(tfloatNode2);
        }
	nodeList.add(patipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce ABoolTipoBase */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PATipo patipoNode1;
        {
            // Block
        TBool tboolNode2;
        tboolNode2 = (TBool)nodeArrayList1.get(0);

        patipoNode1 = new AArBoolATipo(tboolNode2);
        }
	nodeList.add(patipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AOpcaoExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        paexpNode1 = (PAExp)nodeArrayList1.get(0);
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AIgualExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        {
            // Block
        PAExp paexpNode2;
        PAExp paexpNode3;
        paexpNode2 = (PAExp)nodeArrayList1.get(0);
        paexpNode3 = (PAExp)nodeArrayList3.get(0);

        paexpNode1 = new AAIgualAExp(paexpNode2, paexpNode3);
        }
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AMenorIgualExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        {
            // Block
        PAExp paexpNode2;
        PAExp paexpNode3;
        paexpNode2 = (PAExp)nodeArrayList1.get(0);
        paexpNode3 = (PAExp)nodeArrayList3.get(0);

        paexpNode1 = new AAMenorIgualAExp(paexpNode2, paexpNode3);
        }
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AMaiorIgualExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        {
            // Block
        PAExp paexpNode2;
        PAExp paexpNode3;
        paexpNode2 = (PAExp)nodeArrayList1.get(0);
        paexpNode3 = (PAExp)nodeArrayList3.get(0);

        paexpNode1 = new AAMaiorIgualAExp(paexpNode2, paexpNode3);
        }
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AMenorExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        {
            // Block
        PAExp paexpNode2;
        PAExp paexpNode3;
        paexpNode2 = (PAExp)nodeArrayList1.get(0);
        paexpNode3 = (PAExp)nodeArrayList3.get(0);

        paexpNode1 = new AAMenorAExp(paexpNode2, paexpNode3);
        }
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AMaiorExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        {
            // Block
        PAExp paexpNode2;
        PAExp paexpNode3;
        paexpNode2 = (PAExp)nodeArrayList1.get(0);
        paexpNode3 = (PAExp)nodeArrayList3.get(0);

        paexpNode1 = new AAMaiorAExp(paexpNode2, paexpNode3);
        }
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce ANegacaoExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        {
            // Block
        PAExp paexpNode2;
        paexpNode2 = (PAExp)nodeArrayList2.get(0);

        paexpNode1 = new AANegacaoAExp(paexpNode2);
        }
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AAndExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        {
            // Block
        PAExp paexpNode2;
        PAExp paexpNode3;
        paexpNode2 = (PAExp)nodeArrayList1.get(0);
        paexpNode3 = (PAExp)nodeArrayList3.get(0);

        paexpNode1 = new AAAndAExp(paexpNode2, paexpNode3);
        }
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AOrExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        {
            // Block
        PAExp paexpNode2;
        PAExp paexpNode3;
        paexpNode2 = (PAExp)nodeArrayList1.get(0);
        paexpNode3 = (PAExp)nodeArrayList3.get(0);

        paexpNode1 = new AAOrAExp(paexpNode2, paexpNode3);
        }
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AFatorOpcao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        paexpNode1 = (PAExp)nodeArrayList1.get(0);
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce ASomaOpcao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        {
            // Block
        PAExp paexpNode2;
        PAExp paexpNode3;
        paexpNode2 = (PAExp)nodeArrayList1.get(0);
        paexpNode3 = (PAExp)nodeArrayList3.get(0);

        paexpNode1 = new AASomaAExp(paexpNode2, paexpNode3);
        }
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce ASubOpcao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        {
            // Block
        PAExp paexpNode2;
        PAExp paexpNode3;
        paexpNode2 = (PAExp)nodeArrayList1.get(0);
        paexpNode3 = (PAExp)nodeArrayList3.get(0);

        paexpNode1 = new AASubAExp(paexpNode2, paexpNode3);
        }
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce ATermoFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        paexpNode1 = (PAExp)nodeArrayList1.get(0);
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AMultFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        {
            // Block
        PAExp paexpNode2;
        PAExp paexpNode3;
        paexpNode2 = (PAExp)nodeArrayList1.get(0);
        paexpNode3 = (PAExp)nodeArrayList3.get(0);

        paexpNode1 = new AAMultAExp(paexpNode2, paexpNode3);
        }
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce ADivFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        {
            // Block
        PAExp paexpNode2;
        PAExp paexpNode3;
        paexpNode2 = (PAExp)nodeArrayList1.get(0);
        paexpNode3 = (PAExp)nodeArrayList3.get(0);

        paexpNode1 = new AADivAExp(paexpNode2, paexpNode3);
        }
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AVarTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        paexpNode1 = (PAExp)nodeArrayList1.get(0);
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AVariavelTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        paexpNode1 = (PAExp)nodeArrayList1.get(0);
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce APrioridadeTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        paexpNode1 = (PAExp)nodeArrayList2.get(0);
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AChamadaTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        paexpNode1 = (PAExp)nodeArrayList1.get(0);
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce ANumInteiroVariavel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        {
            // Block
        TNumInteiro tnuminteiroNode2;
        tnuminteiroNode2 = (TNumInteiro)nodeArrayList1.get(0);

        paexpNode1 = new AANumInteiroAExp(tnuminteiroNode2);
        }
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce ANumRealVariavel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        {
            // Block
        TNumReal tnumrealNode2;
        tnumrealNode2 = (TNumReal)nodeArrayList1.get(0);

        paexpNode1 = new AANumRealAExp(tnumrealNode2);
        }
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce ACaractereVariavel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        {
            // Block
        TCaractere tcaractereNode2;
        tcaractereNode2 = (TCaractere)nodeArrayList1.get(0);

        paexpNode1 = new AACaractereAExp(tcaractereNode2);
        }
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce ABoolSimVariavel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        {
            // Block
        TSim tsimNode2;
        tsimNode2 = (TSim)nodeArrayList1.get(0);

        paexpNode1 = new AASimAExp(tsimNode2);
        }
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce ABoolNaoVariavel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        {
            // Block
        TNao tnaoNode2;
        tnaoNode2 = (TNao)nodeArrayList1.get(0);

        paexpNode1 = new AANaoAExp(tnaoNode2);
        }
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AStringVariavel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        paexpNode1 = new AAStringAExp(tstringNode2);
        }
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce ADecFuncao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PADecFuncao padecfuncaoNode1;
        {
            // Block
        PATipo patipoNode2;
        PAExp paexpNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        PABloco pablocoNode6;
        patipoNode2 = (PATipo)nodeArrayList2.get(0);
        paexpNode3 = (PAExp)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList7.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        pablocoNode6 = (PABloco)nodeArrayList9.get(0);

        padecfuncaoNode1 = new AArDecFuncaoADecFuncao(patipoNode2, paexpNode3, listNode5, pablocoNode6);
        }
	nodeList.add(padecfuncaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce ATipoTipoRetorno */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PATipo patipoNode1;
        patipoNode1 = (PATipo)nodeArrayList1.get(0);
	nodeList.add(patipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce ANadaTipoRetorno */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PATipo patipoNode1;
        {
            // Block
        TNada tnadaNode2;
        tnadaNode2 = (TNada)nodeArrayList1.get(0);

        patipoNode1 = new AANadaATipo(tnadaNode2);
        }
	nodeList.add(patipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AAbloco1Bloco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PABloco pablocoNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        }
        {
            // Block
        }

        pablocoNode1 = new AArBlocoABloco(listNode2, listNode3);
        }
	nodeList.add(pablocoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AAbloco2Bloco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PABloco pablocoNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        }

        pablocoNode1 = new AArBlocoABloco(listNode3, listNode4);
        }
	nodeList.add(pablocoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AAbloco3Bloco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PABloco pablocoNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pablocoNode1 = new AArBlocoABloco(listNode2, listNode4);
        }
	nodeList.add(pablocoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AAbloco4Bloco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PABloco pablocoNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pablocoNode1 = new AArBlocoABloco(listNode3, listNode5);
        }
	nodeList.add(pablocoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AAparametros1Parametros */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        LinkedList<Object> listNode1 = new LinkedList<Object>();
        {
            // Block
        }
	nodeList.add(listNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AAparametros2Parametros */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        listNode1 = (LinkedList)nodeArrayList1.get(0);
	if(listNode1 != null)
	{
	  listNode2.addAll(listNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AAparam1Param */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PAParametros paparametrosNode1;
        paparametrosNode1 = (PAParametros)nodeArrayList1.get(0);
	if(paparametrosNode1 != null)
	{
	  listNode2.add(paparametrosNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AAparam2Param */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PAParametros paparametrosNode1;
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        paparametrosNode1 = (PAParametros)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(paparametrosNode1 != null)
	{
	  listNode3.add(paparametrosNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AParamAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PAParametros paparametrosNode1;
        paparametrosNode1 = (PAParametros)nodeArrayList2.get(0);
	if(paparametrosNode1 != null)
	{
	  listNode2.add(paparametrosNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AParametro */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAParametros paparametrosNode1;
        {
            // Block
        PATipo patipoNode2;
        PAExp paexpNode3;
        patipoNode2 = (PATipo)nodeArrayList1.get(0);
        paexpNode3 = (PAExp)nodeArrayList2.get(0);

        paparametrosNode1 = new AArParametrosAParametros(patipoNode2, paexpNode3);
        }
	nodeList.add(paparametrosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AStatementComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAComando pacomandoNode1;
        pacomandoNode1 = (PAComando)nodeArrayList1.get(0);
	nodeList.add(pacomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce ADirectStatementComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAComando pacomandoNode1;
        pacomandoNode1 = (PAComando)nodeArrayList1.get(0);
	nodeList.add(pacomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce ASeStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAComando pacomandoNode1;
        {
            // Block
        PAExp paexpNode2;
        PAComando pacomandoNode3;
        paexpNode2 = (PAExp)nodeArrayList3.get(0);
        pacomandoNode3 = (PAComando)nodeArrayList5.get(0);

        pacomandoNode1 = new AASeAComando(paexpNode2, pacomandoNode3);
        }
	nodeList.add(pacomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce ASeAbertoStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAComando pacomandoNode1;
        {
            // Block
        PAExp paexpNode2;
        PAComando pacomandoNode3;
        paexpNode2 = (PAExp)nodeArrayList3.get(0);
        pacomandoNode3 = (PAComando)nodeArrayList5.get(0);

        pacomandoNode1 = new AASeAbertoAComando(paexpNode2, pacomandoNode3);
        }
	nodeList.add(pacomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce ASeSenaoStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAComando pacomandoNode1;
        {
            // Block
        PAExp paexpNode2;
        PAComando pacomandoNode3;
        PAComando pacomandoNode4;
        paexpNode2 = (PAExp)nodeArrayList3.get(0);
        pacomandoNode3 = (PAComando)nodeArrayList5.get(0);
        pacomandoNode4 = (PAComando)nodeArrayList7.get(0);

        pacomandoNode1 = new AASeSenaoAComando(paexpNode2, pacomandoNode3, pacomandoNode4);
        }
	nodeList.add(pacomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AEnquantoStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAComando pacomandoNode1;
        {
            // Block
        PAExp paexpNode2;
        PAComando pacomandoNode3;
        paexpNode2 = (PAExp)nodeArrayList3.get(0);
        pacomandoNode3 = (PAComando)nodeArrayList6.get(0);

        pacomandoNode1 = new AAEnquantoAComando(paexpNode2, pacomandoNode3);
        }
	nodeList.add(pacomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AArrodeieStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAComando pacomandoNode1;
        {
            // Block
        PAAtrib paatribNode2;
        PAExp paexpNode3;
        PAAtrib paatribNode4;
        PAComando pacomandoNode5;
        paatribNode2 = (PAAtrib)nodeArrayList3.get(0);
        paexpNode3 = (PAExp)nodeArrayList5.get(0);
        paatribNode4 = (PAAtrib)nodeArrayList7.get(0);
        pacomandoNode5 = (PAComando)nodeArrayList9.get(0);

        pacomandoNode1 = new AAArrodeieAComando(paatribNode2, paexpNode3, paatribNode4, pacomandoNode5);
        }
	nodeList.add(pacomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce ADirectStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAComando pacomandoNode1;
        pacomandoNode1 = (PAComando)nodeArrayList1.get(0);
	nodeList.add(pacomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce ASeSenaoDirectDirectStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAComando pacomandoNode1;
        {
            // Block
        PAExp paexpNode2;
        PAComando pacomandoNode3;
        PAComando pacomandoNode4;
        paexpNode2 = (PAExp)nodeArrayList3.get(0);
        pacomandoNode3 = (PAComando)nodeArrayList5.get(0);
        pacomandoNode4 = (PAComando)nodeArrayList7.get(0);

        pacomandoNode1 = new AASeSenaoDirectAComando(paexpNode2, pacomandoNode3, pacomandoNode4);
        }
	nodeList.add(pacomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AEnquantoDirectDirectStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAComando pacomandoNode1;
        {
            // Block
        PAExp paexpNode2;
        PAComando pacomandoNode3;
        paexpNode2 = (PAExp)nodeArrayList3.get(0);
        pacomandoNode3 = (PAComando)nodeArrayList6.get(0);

        pacomandoNode1 = new AAEnquantoDirectAComando(paexpNode2, pacomandoNode3);
        }
	nodeList.add(pacomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce AArrodeieDirectDirectStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAComando pacomandoNode1;
        {
            // Block
        PAAtrib paatribNode2;
        PAExp paexpNode3;
        PAAtrib paatribNode4;
        PAComando pacomandoNode5;
        paatribNode2 = (PAAtrib)nodeArrayList3.get(0);
        paexpNode3 = (PAExp)nodeArrayList5.get(0);
        paatribNode4 = (PAAtrib)nodeArrayList7.get(0);
        pacomandoNode5 = (PAComando)nodeArrayList9.get(0);

        pacomandoNode1 = new AAArrodeieDirectAComando(paatribNode2, paexpNode3, paatribNode4, pacomandoNode5);
        }
	nodeList.add(pacomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce AMandeDeVoltaBasicStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAComando pacomandoNode1;
        {
            // Block
        PAExp paexpNode2;
        paexpNode2 = (PAExp)nodeArrayList4.get(0);

        pacomandoNode1 = new AAReturnAComando(paexpNode2);
        }
	nodeList.add(pacomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce AAtribuicaoBasicStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAComando pacomandoNode1;
        {
            // Block
        PAAtrib paatribNode2;
        paatribNode2 = (PAAtrib)nodeArrayList1.get(0);

        pacomandoNode1 = new AAAtribuicaoAComando(paatribNode2);
        }
	nodeList.add(pacomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce ABlocoBasicStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAComando pacomandoNode1;
        {
            // Block
        PABloco pablocoNode2;
        pablocoNode2 = (PABloco)nodeArrayList1.get(0);

        pacomandoNode1 = new AArBlocoAComando(pablocoNode2);
        }
	nodeList.add(pacomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce AChamadaBasicStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAComando pacomandoNode1;
        {
            // Block
        PAExp paexpNode2;
        paexpNode2 = (PAExp)nodeArrayList1.get(0);

        pacomandoNode1 = new AArChamadaAComando(paexpNode2);
        }
	nodeList.add(pacomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce AAtribuicao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAAtrib paatribNode1;
        {
            // Block
        PAExp paexpNode2;
        PAExp paexpNode3;
        paexpNode2 = (PAExp)nodeArrayList1.get(0);
        paexpNode3 = (PAExp)nodeArrayList3.get(0);

        paatribNode1 = new AArAtribuicaoAAtrib(paexpNode2, paexpNode3);
        }
	nodeList.add(paatribNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce AAlistaatrib1ListaAtrib */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAAtrib paatribNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PAAtrib paatribNode2;
        paatribNode2 = (PAAtrib)nodeArrayList1.get(0);
	if(paatribNode2 != null)
	{
	  listNode3.add(paatribNode2);
	}
        }

        paatribNode1 = new AAListaAtribAAtrib(listNode3);
        }
	nodeList.add(paatribNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce AAlistaatrib2ListaAtrib */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAAtrib paatribNode1;
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        PAAtrib paatribNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        paatribNode2 = (PAAtrib)nodeArrayList1.get(0);
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(paatribNode2 != null)
	{
	  listNode4.add(paatribNode2);
	}
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        paatribNode1 = new AAListaAtribAAtrib(listNode4);
        }
	nodeList.add(paatribNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce AAtribAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAAtrib paatribNode1;
        paatribNode1 = (PAAtrib)nodeArrayList2.get(0);
	nodeList.add(paatribNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce AIdVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        paexpNode1 = (PAExp)nodeArrayList1.get(0);
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce AVarExpVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        {
            // Block
        PAExp paexpNode2;
        PAExp paexpNode3;
        paexpNode2 = (PAExp)nodeArrayList1.get(0);
        paexpNode3 = (PAExp)nodeArrayList3.get(0);

        paexpNode1 = new AAVarExpAExp(paexpNode2, paexpNode3);
        }
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce AAchamada1Chamada */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        {
            // Block
        PAExp paexpNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        paexpNode2 = (PAExp)nodeArrayList1.get(0);
        {
            // Block
        }

        paexpNode1 = new AAChamadaAExp(paexpNode2, listNode3);
        }
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce AAchamada2Chamada */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        {
            // Block
        PAExp paexpNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        paexpNode2 = (PAExp)nodeArrayList1.get(0);
        {
            // Block
        PAExp paexpNode3;
        paexpNode3 = (PAExp)nodeArrayList3.get(0);
	if(paexpNode3 != null)
	{
	  listNode4.add(paexpNode3);
	}
        }

        paexpNode1 = new AAChamadaAExp(paexpNode2, listNode4);
        }
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce AAlistaexp1ListaExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PAExp paexpNode2;
        paexpNode2 = (PAExp)nodeArrayList1.get(0);
	if(paexpNode2 != null)
	{
	  listNode3.add(paexpNode2);
	}
        }

        paexpNode1 = new AAListaExpAExp(listNode3);
        }
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce AAlistaexp2ListaExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        PAExp paexpNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        paexpNode2 = (PAExp)nodeArrayList1.get(0);
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(paexpNode2 != null)
	{
	  listNode4.add(paexpNode2);
	}
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        paexpNode1 = new AAListaExpAExp(listNode4);
        }
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce AExpAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        paexpNode1 = (PAExp)nodeArrayList2.get(0);
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new77() /* reduce AIdentificador */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        paexpNode1 = new AAIdAExp(tidNode2);
        }
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new78() /* reduce ATerminal$DecVariavel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PADecVariavel padecvariavelNode1;
        padecvariavelNode1 = (PADecVariavel)nodeArrayList1.get(0);
	if(padecvariavelNode1 != null)
	{
	  listNode2.add(padecvariavelNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new79() /* reduce ANonTerminal$DecVariavel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PADecVariavel padecvariavelNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        padecvariavelNode2 = (PADecVariavel)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(padecvariavelNode2 != null)
	{
	  listNode3.add(padecvariavelNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new80() /* reduce ATerminal$DecFuncao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PADecFuncao padecfuncaoNode1;
        padecfuncaoNode1 = (PADecFuncao)nodeArrayList1.get(0);
	if(padecfuncaoNode1 != null)
	{
	  listNode2.add(padecfuncaoNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new81() /* reduce ANonTerminal$DecFuncao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PADecFuncao padecfuncaoNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        padecfuncaoNode2 = (PADecFuncao)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(padecfuncaoNode2 != null)
	{
	  listNode3.add(padecfuncaoNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new82() /* reduce ATerminal$IdAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PAExp paexpNode1;
        paexpNode1 = (PAExp)nodeArrayList1.get(0);
	if(paexpNode1 != null)
	{
	  listNode2.add(paexpNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new83() /* reduce ANonTerminal$IdAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PAExp paexpNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        paexpNode2 = (PAExp)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(paexpNode2 != null)
	{
	  listNode3.add(paexpNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new84() /* reduce ATerminal$Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PAComando pacomandoNode1;
        pacomandoNode1 = (PAComando)nodeArrayList1.get(0);
	if(pacomandoNode1 != null)
	{
	  listNode2.add(pacomandoNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new85() /* reduce ANonTerminal$Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PAComando pacomandoNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pacomandoNode2 = (PAComando)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pacomandoNode2 != null)
	{
	  listNode3.add(pacomandoNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new86() /* reduce ATerminal$ParamAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        listNode1 = (LinkedList)nodeArrayList1.get(0);
	if(listNode1 != null)
	{
	  listNode2.addAll(listNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new87() /* reduce ANonTerminal$ParamAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new88() /* reduce ATerminal$AtribAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PAAtrib paatribNode1;
        paatribNode1 = (PAAtrib)nodeArrayList1.get(0);
	if(paatribNode1 != null)
	{
	  listNode2.add(paatribNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new89() /* reduce ANonTerminal$AtribAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PAAtrib paatribNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        paatribNode2 = (PAAtrib)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(paatribNode2 != null)
	{
	  listNode3.add(paatribNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new90() /* reduce ATerminal$ExpAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PAExp paexpNode1;
        paexpNode1 = (PAExp)nodeArrayList1.get(0);
	if(paexpNode1 != null)
	{
	  listNode2.add(paexpNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new91() /* reduce ANonTerminal$ExpAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PAExp paexpNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        paexpNode2 = (PAExp)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(paexpNode2 != null)
	{
	  listNode3.add(paexpNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 0}, {23, SHIFT, 1}, {24, SHIFT, 2}, {25, SHIFT, 3}, {26, SHIFT, 4}, {36, SHIFT, 5}, {40, SHIFT, 6}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 5}, {37, SHIFT, 14}, },
			{{-1, ERROR, 6}, {23, SHIFT, 1}, {24, SHIFT, 2}, {25, SHIFT, 3}, {26, SHIFT, 4}, {27, SHIFT, 15}, {36, SHIFT, 5}, },
			{{-1, ERROR, 7}, {47, ACCEPT, -1}, },
			{{-1, REDUCE, 78}, },
			{{-1, ERROR, 9}, {46, SHIFT, 18}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 80}, },
			{{-1, REDUCE, 1}, {23, SHIFT, 1}, {24, SHIFT, 2}, {25, SHIFT, 3}, {26, SHIFT, 4}, {36, SHIFT, 5}, {40, SHIFT, 6}, },
			{{-1, REDUCE, 2}, {40, SHIFT, 6}, },
			{{-1, ERROR, 14}, {23, SHIFT, 1}, {24, SHIFT, 2}, {25, SHIFT, 3}, {26, SHIFT, 4}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 39}, },
			{{-1, ERROR, 17}, {41, SHIFT, 24}, },
			{{-1, REDUCE, 77}, },
			{{-1, ERROR, 19}, {20, SHIFT, 25}, {22, SHIFT, 26}, },
			{{-1, REDUCE, 79}, },
			{{-1, REDUCE, 3}, {40, SHIFT, 6}, },
			{{-1, REDUCE, 81}, },
			{{-1, ERROR, 23}, {13, SHIFT, 29}, },
			{{-1, ERROR, 24}, {21, SHIFT, 30}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 26}, {46, SHIFT, 18}, },
			{{-1, REDUCE, 82}, },
			{{-1, ERROR, 28}, {20, SHIFT, 32}, {22, SHIFT, 26}, },
			{{-1, ERROR, 29}, {0, SHIFT, 34}, {1, SHIFT, 35}, {3, SHIFT, 36}, {4, SHIFT, 37}, {11, SHIFT, 38}, {29, SHIFT, 39}, {44, SHIFT, 40}, {45, SHIFT, 41}, {46, SHIFT, 18}, },
			{{-1, ERROR, 30}, {46, SHIFT, 18}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 83}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 37}, },
			{{-1, ERROR, 38}, {0, SHIFT, 34}, {1, SHIFT, 35}, {3, SHIFT, 36}, {4, SHIFT, 37}, {11, SHIFT, 38}, {29, SHIFT, 39}, {44, SHIFT, 40}, {45, SHIFT, 41}, {46, SHIFT, 18}, },
			{{-1, ERROR, 39}, {0, SHIFT, 34}, {1, SHIFT, 35}, {3, SHIFT, 36}, {4, SHIFT, 37}, {11, SHIFT, 38}, {44, SHIFT, 40}, {45, SHIFT, 41}, {46, SHIFT, 18}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 36}, },
			{{-1, ERROR, 42}, {14, SHIFT, 53}, {15, SHIFT, 54}, {16, SHIFT, 55}, {17, SHIFT, 56}, {18, SHIFT, 57}, {19, SHIFT, 58}, {28, SHIFT, 59}, {30, SHIFT, 60}, },
			{{-1, REDUCE, 13}, {5, SHIFT, 61}, {6, SHIFT, 62}, },
			{{-1, REDUCE, 22}, {7, SHIFT, 63}, {8, SHIFT, 64}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 28}, {13, SHIFT, 65}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 70}, {11, SHIFT, 66}, },
			{{-1, ERROR, 50}, {11, SHIFT, 67}, },
			{{-1, ERROR, 51}, {12, SHIFT, 68}, {15, SHIFT, 54}, {16, SHIFT, 55}, {17, SHIFT, 56}, {18, SHIFT, 57}, {19, SHIFT, 58}, {28, SHIFT, 59}, {30, SHIFT, 60}, },
			{{-1, REDUCE, 19}, {5, SHIFT, 61}, {6, SHIFT, 62}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 54}, {0, SHIFT, 34}, {1, SHIFT, 35}, {3, SHIFT, 36}, {4, SHIFT, 37}, {11, SHIFT, 38}, {44, SHIFT, 40}, {45, SHIFT, 41}, {46, SHIFT, 18}, },
			{{-1, ERROR, 55}, {0, SHIFT, 34}, {1, SHIFT, 35}, {3, SHIFT, 36}, {4, SHIFT, 37}, {11, SHIFT, 38}, {44, SHIFT, 40}, {45, SHIFT, 41}, {46, SHIFT, 18}, },
			{{-1, ERROR, 56}, {0, SHIFT, 34}, {1, SHIFT, 35}, {3, SHIFT, 36}, {4, SHIFT, 37}, {11, SHIFT, 38}, {44, SHIFT, 40}, {45, SHIFT, 41}, {46, SHIFT, 18}, },
			{{-1, ERROR, 57}, {0, SHIFT, 34}, {1, SHIFT, 35}, {3, SHIFT, 36}, {4, SHIFT, 37}, {11, SHIFT, 38}, {44, SHIFT, 40}, {45, SHIFT, 41}, {46, SHIFT, 18}, },
			{{-1, ERROR, 58}, {0, SHIFT, 34}, {1, SHIFT, 35}, {3, SHIFT, 36}, {4, SHIFT, 37}, {11, SHIFT, 38}, {44, SHIFT, 40}, {45, SHIFT, 41}, {46, SHIFT, 18}, },
			{{-1, ERROR, 59}, {0, SHIFT, 34}, {1, SHIFT, 35}, {3, SHIFT, 36}, {4, SHIFT, 37}, {11, SHIFT, 38}, {44, SHIFT, 40}, {45, SHIFT, 41}, {46, SHIFT, 18}, },
			{{-1, ERROR, 60}, {0, SHIFT, 34}, {1, SHIFT, 35}, {3, SHIFT, 36}, {4, SHIFT, 37}, {11, SHIFT, 38}, {44, SHIFT, 40}, {45, SHIFT, 41}, {46, SHIFT, 18}, },
			{{-1, ERROR, 61}, {0, SHIFT, 34}, {1, SHIFT, 35}, {3, SHIFT, 36}, {4, SHIFT, 37}, {11, SHIFT, 38}, {44, SHIFT, 40}, {45, SHIFT, 41}, {46, SHIFT, 18}, },
			{{-1, ERROR, 62}, {0, SHIFT, 34}, {1, SHIFT, 35}, {3, SHIFT, 36}, {4, SHIFT, 37}, {11, SHIFT, 38}, {44, SHIFT, 40}, {45, SHIFT, 41}, {46, SHIFT, 18}, },
			{{-1, ERROR, 63}, {0, SHIFT, 34}, {1, SHIFT, 35}, {3, SHIFT, 36}, {4, SHIFT, 37}, {11, SHIFT, 38}, {44, SHIFT, 40}, {45, SHIFT, 41}, {46, SHIFT, 18}, },
			{{-1, ERROR, 64}, {0, SHIFT, 34}, {1, SHIFT, 35}, {3, SHIFT, 36}, {4, SHIFT, 37}, {11, SHIFT, 38}, {44, SHIFT, 40}, {45, SHIFT, 41}, {46, SHIFT, 18}, },
			{{-1, ERROR, 65}, {0, SHIFT, 34}, {1, SHIFT, 35}, {3, SHIFT, 36}, {4, SHIFT, 37}, {11, SHIFT, 38}, {29, SHIFT, 39}, {44, SHIFT, 40}, {45, SHIFT, 41}, {46, SHIFT, 18}, },
			{{-1, ERROR, 66}, {0, SHIFT, 34}, {1, SHIFT, 35}, {3, SHIFT, 36}, {4, SHIFT, 37}, {11, SHIFT, 38}, {12, SHIFT, 81}, {29, SHIFT, 39}, {44, SHIFT, 40}, {45, SHIFT, 41}, {46, SHIFT, 18}, },
			{{-1, REDUCE, 45}, {23, SHIFT, 1}, {24, SHIFT, 2}, {25, SHIFT, 3}, {26, SHIFT, 4}, {36, SHIFT, 5}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 17}, {5, SHIFT, 61}, {6, SHIFT, 62}, },
			{{-1, REDUCE, 18}, {5, SHIFT, 61}, {6, SHIFT, 62}, },
			{{-1, REDUCE, 14}, {5, SHIFT, 61}, {6, SHIFT, 62}, },
			{{-1, REDUCE, 15}, {5, SHIFT, 61}, {6, SHIFT, 62}, },
			{{-1, REDUCE, 16}, {5, SHIFT, 61}, {6, SHIFT, 62}, },
			{{-1, REDUCE, 21}, {5, SHIFT, 61}, {6, SHIFT, 62}, },
			{{-1, REDUCE, 20}, {5, SHIFT, 61}, {6, SHIFT, 62}, },
			{{-1, REDUCE, 23}, {7, SHIFT, 63}, {8, SHIFT, 64}, },
			{{-1, REDUCE, 24}, {7, SHIFT, 63}, {8, SHIFT, 64}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 27}, },
			{{-1, ERROR, 80}, {14, SHIFT, 88}, {15, SHIFT, 54}, {16, SHIFT, 55}, {17, SHIFT, 56}, {18, SHIFT, 57}, {19, SHIFT, 58}, {28, SHIFT, 59}, {30, SHIFT, 60}, },
			{{-1, REDUCE, 72}, },
			{{-1, REDUCE, 74}, {10, SHIFT, 89}, {15, SHIFT, 54}, {16, SHIFT, 55}, {17, SHIFT, 56}, {18, SHIFT, 57}, {19, SHIFT, 58}, {28, SHIFT, 59}, {30, SHIFT, 60}, },
			{{-1, ERROR, 83}, {12, SHIFT, 92}, },
			{{-1, ERROR, 84}, {46, SHIFT, 18}, },
			{{-1, ERROR, 85}, {12, SHIFT, 94}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 47}, {10, SHIFT, 95}, },
			{{-1, REDUCE, 71}, },
			{{-1, ERROR, 89}, {0, SHIFT, 34}, {1, SHIFT, 35}, {3, SHIFT, 36}, {4, SHIFT, 37}, {11, SHIFT, 38}, {29, SHIFT, 39}, {44, SHIFT, 40}, {45, SHIFT, 41}, {46, SHIFT, 18}, },
			{{-1, REDUCE, 90}, },
			{{-1, REDUCE, 75}, {10, SHIFT, 89}, },
			{{-1, REDUCE, 73}, },
			{{-1, REDUCE, 50}, },
			{{-1, ERROR, 94}, {42, SHIFT, 100}, },
			{{-1, ERROR, 95}, {23, SHIFT, 1}, {24, SHIFT, 2}, {25, SHIFT, 3}, {26, SHIFT, 4}, {36, SHIFT, 5}, },
			{{-1, REDUCE, 86}, },
			{{-1, REDUCE, 48}, {10, SHIFT, 95}, },
			{{-1, REDUCE, 76}, {15, SHIFT, 54}, {16, SHIFT, 55}, {17, SHIFT, 56}, {18, SHIFT, 57}, {19, SHIFT, 58}, {28, SHIFT, 59}, {30, SHIFT, 60}, },
			{{-1, REDUCE, 91}, },
			{{-1, ERROR, 100}, {23, SHIFT, 1}, {24, SHIFT, 2}, {25, SHIFT, 3}, {26, SHIFT, 4}, {31, SHIFT, 104}, {33, SHIFT, 105}, {34, SHIFT, 106}, {36, SHIFT, 5}, {38, SHIFT, 107}, {42, SHIFT, 100}, {43, SHIFT, 108}, {46, SHIFT, 18}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 87}, },
			{{-1, ERROR, 104}, {11, SHIFT, 119}, },
			{{-1, ERROR, 105}, {11, SHIFT, 120}, },
			{{-1, ERROR, 106}, {11, SHIFT, 121}, },
			{{-1, ERROR, 107}, {37, SHIFT, 122}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 84}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 58}, },
			{{-1, ERROR, 114}, {20, SHIFT, 123}, },
			{{-1, ERROR, 115}, {9, SHIFT, 124}, {13, SHIFT, 65}, },
			{{-1, ERROR, 116}, {20, SHIFT, 125}, },
			{{-1, ERROR, 117}, {23, SHIFT, 1}, {24, SHIFT, 2}, {25, SHIFT, 3}, {26, SHIFT, 4}, {31, SHIFT, 104}, {33, SHIFT, 105}, {34, SHIFT, 106}, {36, SHIFT, 5}, {38, SHIFT, 107}, {42, SHIFT, 100}, {43, SHIFT, 126}, {46, SHIFT, 18}, },
			{{-1, ERROR, 118}, {31, SHIFT, 104}, {33, SHIFT, 105}, {34, SHIFT, 106}, {38, SHIFT, 107}, {42, SHIFT, 100}, {43, SHIFT, 128}, {46, SHIFT, 18}, },
			{{-1, ERROR, 119}, {0, SHIFT, 34}, {1, SHIFT, 35}, {3, SHIFT, 36}, {4, SHIFT, 37}, {11, SHIFT, 38}, {29, SHIFT, 39}, {44, SHIFT, 40}, {45, SHIFT, 41}, {46, SHIFT, 18}, },
			{{-1, ERROR, 120}, {46, SHIFT, 18}, },
			{{-1, ERROR, 121}, {0, SHIFT, 34}, {1, SHIFT, 35}, {3, SHIFT, 36}, {4, SHIFT, 37}, {11, SHIFT, 38}, {29, SHIFT, 39}, {44, SHIFT, 40}, {45, SHIFT, 41}, {46, SHIFT, 18}, },
			{{-1, ERROR, 122}, {39, SHIFT, 135}, },
			{{-1, REDUCE, 63}, },
			{{-1, ERROR, 124}, {0, SHIFT, 34}, {1, SHIFT, 35}, {3, SHIFT, 36}, {4, SHIFT, 37}, {11, SHIFT, 38}, {29, SHIFT, 39}, {44, SHIFT, 40}, {45, SHIFT, 41}, {46, SHIFT, 18}, },
			{{-1, REDUCE, 65}, },
			{{-1, REDUCE, 42}, },
			{{-1, ERROR, 127}, {31, SHIFT, 104}, {33, SHIFT, 105}, {34, SHIFT, 106}, {38, SHIFT, 107}, {42, SHIFT, 100}, {43, SHIFT, 137}, {46, SHIFT, 18}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 85}, },
			{{-1, ERROR, 130}, {12, SHIFT, 138}, {15, SHIFT, 54}, {16, SHIFT, 55}, {17, SHIFT, 56}, {18, SHIFT, 57}, {19, SHIFT, 58}, {28, SHIFT, 59}, {30, SHIFT, 60}, },
			{{-1, REDUCE, 67}, {22, SHIFT, 139}, },
			{{-1, ERROR, 132}, {20, SHIFT, 142}, },
			{{-1, REDUCE, 70}, },
			{{-1, ERROR, 134}, {12, SHIFT, 143}, {15, SHIFT, 54}, {16, SHIFT, 55}, {17, SHIFT, 56}, {18, SHIFT, 57}, {19, SHIFT, 58}, {28, SHIFT, 59}, {30, SHIFT, 60}, },
			{{-1, ERROR, 135}, {0, SHIFT, 34}, {1, SHIFT, 35}, {3, SHIFT, 36}, {4, SHIFT, 37}, {11, SHIFT, 38}, {29, SHIFT, 39}, {44, SHIFT, 40}, {45, SHIFT, 41}, {46, SHIFT, 18}, },
			{{-1, REDUCE, 66}, {15, SHIFT, 54}, {16, SHIFT, 55}, {17, SHIFT, 56}, {18, SHIFT, 57}, {19, SHIFT, 58}, {28, SHIFT, 59}, {30, SHIFT, 60}, },
			{{-1, REDUCE, 44}, },
			{{-1, ERROR, 138}, {31, SHIFT, 104}, {33, SHIFT, 105}, {34, SHIFT, 106}, {38, SHIFT, 107}, {42, SHIFT, 100}, {46, SHIFT, 18}, },
			{{-1, ERROR, 139}, {46, SHIFT, 18}, },
			{{-1, REDUCE, 88}, },
			{{-1, REDUCE, 68}, {22, SHIFT, 139}, },
			{{-1, ERROR, 142}, {0, SHIFT, 34}, {1, SHIFT, 35}, {3, SHIFT, 36}, {4, SHIFT, 37}, {11, SHIFT, 38}, {29, SHIFT, 39}, {44, SHIFT, 40}, {45, SHIFT, 41}, {46, SHIFT, 18}, },
			{{-1, ERROR, 143}, {35, SHIFT, 151}, },
			{{-1, ERROR, 144}, {15, SHIFT, 54}, {16, SHIFT, 55}, {17, SHIFT, 56}, {18, SHIFT, 57}, {19, SHIFT, 58}, {20, SHIFT, 152}, {28, SHIFT, 59}, {30, SHIFT, 60}, },
			{{-1, REDUCE, 54}, },
			{{-1, ERROR, 146}, {32, SHIFT, 153}, },
			{{-1, REDUCE, 53}, {32, REDUCE, 58}, },
			{{-1, REDUCE, 69}, },
			{{-1, REDUCE, 89}, },
			{{-1, ERROR, 150}, {15, SHIFT, 54}, {16, SHIFT, 55}, {17, SHIFT, 56}, {18, SHIFT, 57}, {19, SHIFT, 58}, {20, SHIFT, 154}, {28, SHIFT, 59}, {30, SHIFT, 60}, },
			{{-1, ERROR, 151}, {31, SHIFT, 104}, {33, SHIFT, 105}, {34, SHIFT, 106}, {38, SHIFT, 107}, {42, SHIFT, 100}, {46, SHIFT, 18}, },
			{{-1, REDUCE, 62}, },
			{{-1, ERROR, 153}, {31, SHIFT, 104}, {33, SHIFT, 105}, {34, SHIFT, 106}, {38, SHIFT, 107}, {42, SHIFT, 100}, {46, SHIFT, 18}, },
			{{-1, ERROR, 154}, {46, SHIFT, 18}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 60}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 59}, },
			{{-1, ERROR, 159}, {12, SHIFT, 160}, },
			{{-1, ERROR, 160}, {31, SHIFT, 104}, {33, SHIFT, 105}, {34, SHIFT, 106}, {38, SHIFT, 107}, {42, SHIFT, 100}, {46, SHIFT, 18}, },
			{{-1, REDUCE, 57}, },
			{{-1, REDUCE, 61}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 7}, },
			{{-1, 8}, {12, 20}, {117, 20}, },
			{{-1, 27}, {28, 33}, },
			{{-1, 9}, {6, 16}, {67, 84}, {95, 84}, },
			{{-1, 10}, {14, 23}, },
			{{-1, 42}, {38, 51}, {65, 80}, {66, 82}, {89, 98}, {119, 130}, {121, 134}, {124, 136}, {135, 144}, {142, 150}, },
			{{-1, 43}, {39, 52}, {54, 69}, {55, 70}, {56, 71}, {57, 72}, {58, 73}, {59, 74}, {60, 75}, },
			{{-1, 44}, {61, 76}, {62, 77}, },
			{{-1, 45}, {63, 78}, {64, 79}, },
			{{-1, 46}, },
			{{-1, 11}, {13, 22}, {21, 22}, },
			{{-1, 17}, },
			{{-1, 109}, {94, 101}, },
			{{-1, 85}, },
			{{-1, 86}, },
			{{-1, 96}, {97, 103}, },
			{{-1, 87}, {95, 102}, },
			{{-1, 110}, {118, 129}, {127, 129}, },
			{{-1, 111}, {138, 145}, {151, 155}, {153, 157}, {160, 161}, },
			{{-1, 112}, {138, 146}, {151, 156}, {153, 158}, {160, 162}, },
			{{-1, 113}, {138, 147}, },
			{{-1, 114}, {120, 131}, {139, 148}, {154, 131}, },
			{{-1, 132}, {154, 159}, },
			{{-1, 140}, {141, 149}, },
			{{-1, 47}, {100, 115}, {117, 115}, {118, 115}, {120, 115}, {127, 115}, {138, 115}, {139, 115}, {151, 115}, {153, 115}, {154, 115}, {160, 115}, },
			{{-1, 48}, {100, 116}, {117, 116}, {118, 116}, {127, 116}, {138, 116}, {151, 116}, {153, 116}, {160, 116}, },
			{{-1, 83}, },
			{{-1, 90}, {91, 99}, },
			{{-1, 49}, {9, 19}, {26, 31}, {30, 50}, {84, 93}, {120, 133}, {139, 133}, {154, 133}, },
			{{-1, 12}, {100, 117}, },
			{{-1, 13}, {12, 21}, },
			{{-1, 28}, },
			{{-1, 118}, {117, 127}, },
			{{-1, 97}, },
			{{-1, 141}, },
			{{-1, 91}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'inteiro', 'real', 'caractere', 'booleano', 'ruma', 'arrume', EOF",
			"expecting: '[', 'assim', id",
			"expecting: 'de'",
			"expecting: 'inteiro', 'real', 'caractere', 'booleano', 'nada', 'ruma'",
			"expecting: EOF",
			"expecting: 'inteiro', 'real', 'caractere', 'booleano', 'se', 'arrodeie', 'enquanto', 'ruma', 'mande', 'arrume', 'inicio', 'fim', id, EOF",
			"expecting: id",
			"expecting: 'assim', id",
			"expecting: 'arrume', EOF",
			"expecting: 'inteiro', 'real', 'caractere', 'booleano'",
			"expecting: 'assim'",
			"expecting: '+', '-', '*', '/', ':=', '|', '(', ')', '[', ']', '<', '>', '=', '<=', '>=', ';', ',', 'ou', 'e'",
			"expecting: ';', ','",
			"expecting: '['",
			"expecting: ':'",
			"expecting: num inteiro, num real, caractere, string, '(', '!', 'sim', 'nao', id",
			"expecting: '+', '-', '*', '/', '|', ')', ']', '<', '>', '=', '<=', '>=', ';', ',', 'ou', 'e'",
			"expecting: num inteiro, num real, caractere, string, '(', 'sim', 'nao', id",
			"expecting: ']', '<', '>', '=', '<=', '>=', 'ou', 'e'",
			"expecting: '+', '-', '|', ')', ']', '<', '>', '=', '<=', '>=', ';', ',', 'ou', 'e'",
			"expecting: '+', '-', '*', '/', '|', ')', '[', ']', '<', '>', '=', '<=', '>=', ';', ',', 'ou', 'e'",
			"expecting: '('",
			"expecting: ')', '<', '>', '=', '<=', '>=', 'ou', 'e'",
			"expecting: num inteiro, num real, caractere, string, '(', ')', '!', 'sim', 'nao', id",
			"expecting: ')', 'inteiro', 'real', 'caractere', 'booleano', 'ruma'",
			"expecting: '|', ')', '<', '>', '=', '<=', '>=', 'ou', 'e'",
			"expecting: ')'",
			"expecting: '|', ')'",
			"expecting: '+', '-', '*', '/', ':=', '|', ')', '[', ']', '<', '>', '=', '<=', '>=', ';', ',', 'ou', 'e'",
			"expecting: 'inicio'",
			"expecting: 'inteiro', 'real', 'caractere', 'booleano', 'ruma'",
			"expecting: 'inteiro', 'real', 'caractere', 'booleano', 'se', 'arrodeie', 'enquanto', 'ruma', 'mande', 'inicio', 'fim', id",
			"expecting: 'se', 'senao', 'arrodeie', 'enquanto', 'mande', 'arrume', 'inicio', 'fim', id, EOF",
			"expecting: 'se', 'senao', 'arrodeie', 'enquanto', 'mande', 'inicio', 'fim', id",
			"expecting: 'se', 'arrodeie', 'enquanto', 'mande', 'inicio', 'fim', id",
			"expecting: ';'",
			"expecting: ':=', '['",
			"expecting: 'volta'",
			"expecting: ')', ';', ','",
			"expecting: ')', '<', '>', '=', '<=', '>=', ';', ',', 'ou', 'e'",
			"expecting: 'se', 'arrodeie', 'enquanto', 'mande', 'inicio', id",
			"expecting: 'repita'",
			"expecting: '<', '>', '=', '<=', '>=', ';', 'ou', 'e'",
			"expecting: 'senao'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 1, 1, 1, 2, 3, 4, 5, 6, 7, 8, 0, 8, 9, 10, 10, 10, 11, 12, 5, 8, 8, 13, 14, 5, 6, 12, 12, 15, 6, 12, 5, 12, 16, 16, 16, 16, 15, 17, 16, 16, 18, 19, 16, 16, 16, 20, 16, 11, 21, 22, 19, 7, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 15, 23, 24, 16, 19, 19, 19, 19, 19, 19, 19, 16, 16, 16, 16, 18, 16, 25, 26, 6, 26, 26, 27, 28, 15, 27, 27, 16, 27, 29, 30, 27, 27, 25, 27, 31, 8, 27, 27, 21, 21, 21, 2, 32, 33, 34, 34, 34, 33, 35, 36, 35, 31, 34, 15, 6, 15, 37, 33, 15, 33, 32, 34, 32, 34, 22, 38, 35, 36, 22, 15, 39, 32, 40, 6, 38, 38, 15, 41, 42, 34, 43, 33, 38, 38, 42, 40, 33, 40, 6, 34, 33, 34, 33, 26, 40, 34, 33, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
