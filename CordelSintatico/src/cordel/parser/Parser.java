/* This file was generated by SableCC (http://www.sablecc.org/). */

package cordel.parser;

import cordel.lexer.*;
import cordel.node.*;
import cordel.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PPrograma node1 = (PPrograma) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AAprograma1Programa */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AAprograma2Programa */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list, false);
            }
            break;
            case 2: /* reduce ADecVariavelDecOrDef */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list, false);
            }
            break;
            case 3: /* reduce ADecFuncaoDecOrDef */
            {
                ArrayList<Object> list = new3();
                push(goTo(1), list, false);
            }
            break;
            case 4: /* reduce ADecVariavel */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list, false);
            }
            break;
            case 5: /* reduce ATipoTipo */
            {
                ArrayList<Object> list = new5();
                push(goTo(3), list, false);
            }
            break;
            case 6: /* reduce AVetorTipo */
            {
                ArrayList<Object> list = new6();
                push(goTo(3), list, false);
            }
            break;
            case 7: /* reduce AIntTipoBase */
            {
                ArrayList<Object> list = new7();
                push(goTo(4), list, false);
            }
            break;
            case 8: /* reduce ACaractereTipoBase */
            {
                ArrayList<Object> list = new8();
                push(goTo(4), list, false);
            }
            break;
            case 9: /* reduce AFloatTipoBase */
            {
                ArrayList<Object> list = new9();
                push(goTo(4), list, false);
            }
            break;
            case 10: /* reduce ABoolTipoBase */
            {
                ArrayList<Object> list = new10();
                push(goTo(4), list, false);
            }
            break;
            case 11: /* reduce AOpcaoExp */
            {
                ArrayList<Object> list = new11();
                push(goTo(5), list, false);
            }
            break;
            case 12: /* reduce AIgualExp */
            {
                ArrayList<Object> list = new12();
                push(goTo(5), list, false);
            }
            break;
            case 13: /* reduce AMenorIgualExp */
            {
                ArrayList<Object> list = new13();
                push(goTo(5), list, false);
            }
            break;
            case 14: /* reduce AMaiorIgualExp */
            {
                ArrayList<Object> list = new14();
                push(goTo(5), list, false);
            }
            break;
            case 15: /* reduce AMenorExp */
            {
                ArrayList<Object> list = new15();
                push(goTo(5), list, false);
            }
            break;
            case 16: /* reduce AMaiorExp */
            {
                ArrayList<Object> list = new16();
                push(goTo(5), list, false);
            }
            break;
            case 17: /* reduce ANegacaoExp */
            {
                ArrayList<Object> list = new17();
                push(goTo(5), list, false);
            }
            break;
            case 18: /* reduce AAndExp */
            {
                ArrayList<Object> list = new18();
                push(goTo(5), list, false);
            }
            break;
            case 19: /* reduce AOrExp */
            {
                ArrayList<Object> list = new19();
                push(goTo(5), list, false);
            }
            break;
            case 20: /* reduce AFatorOpcao */
            {
                ArrayList<Object> list = new20();
                push(goTo(6), list, false);
            }
            break;
            case 21: /* reduce ASomaOpcao */
            {
                ArrayList<Object> list = new21();
                push(goTo(6), list, false);
            }
            break;
            case 22: /* reduce ASubOpcao */
            {
                ArrayList<Object> list = new22();
                push(goTo(6), list, false);
            }
            break;
            case 23: /* reduce ATermoFator */
            {
                ArrayList<Object> list = new23();
                push(goTo(7), list, false);
            }
            break;
            case 24: /* reduce AMultFator */
            {
                ArrayList<Object> list = new24();
                push(goTo(7), list, false);
            }
            break;
            case 25: /* reduce ADivFator */
            {
                ArrayList<Object> list = new25();
                push(goTo(7), list, false);
            }
            break;
            case 26: /* reduce AVarTermo */
            {
                ArrayList<Object> list = new26();
                push(goTo(8), list, false);
            }
            break;
            case 27: /* reduce AVariavelTermo */
            {
                ArrayList<Object> list = new27();
                push(goTo(8), list, false);
            }
            break;
            case 28: /* reduce APrioridadeTermo */
            {
                ArrayList<Object> list = new28();
                push(goTo(8), list, false);
            }
            break;
            case 29: /* reduce ACallingTermo */
            {
                ArrayList<Object> list = new29();
                push(goTo(8), list, false);
            }
            break;
            case 30: /* reduce ANumInteiroVariavel */
            {
                ArrayList<Object> list = new30();
                push(goTo(9), list, false);
            }
            break;
            case 31: /* reduce ANumRealVariavel */
            {
                ArrayList<Object> list = new31();
                push(goTo(9), list, false);
            }
            break;
            case 32: /* reduce ACaractereVariavel */
            {
                ArrayList<Object> list = new32();
                push(goTo(9), list, false);
            }
            break;
            case 33: /* reduce ABoolSimVariavel */
            {
                ArrayList<Object> list = new33();
                push(goTo(9), list, false);
            }
            break;
            case 34: /* reduce ABoolNaoVariavel */
            {
                ArrayList<Object> list = new34();
                push(goTo(9), list, false);
            }
            break;
            case 35: /* reduce AStringVariavel */
            {
                ArrayList<Object> list = new35();
                push(goTo(9), list, false);
            }
            break;
            case 36: /* reduce ADecFuncao */
            {
                ArrayList<Object> list = new36();
                push(goTo(10), list, false);
            }
            break;
            case 37: /* reduce ATipoTipoRetorno */
            {
                ArrayList<Object> list = new37();
                push(goTo(11), list, false);
            }
            break;
            case 38: /* reduce ANadaTipoRetorno */
            {
                ArrayList<Object> list = new38();
                push(goTo(11), list, false);
            }
            break;
            case 39: /* reduce AAbloco1Bloco */
            {
                ArrayList<Object> list = new39();
                push(goTo(12), list, false);
            }
            break;
            case 40: /* reduce AAbloco2Bloco */
            {
                ArrayList<Object> list = new40();
                push(goTo(12), list, false);
            }
            break;
            case 41: /* reduce AAbloco3Bloco */
            {
                ArrayList<Object> list = new41();
                push(goTo(12), list, false);
            }
            break;
            case 42: /* reduce AAbloco4Bloco */
            {
                ArrayList<Object> list = new42();
                push(goTo(12), list, false);
            }
            break;
            case 43: /* reduce AAparametros1Parametros */
            {
                ArrayList<Object> list = new43();
                push(goTo(13), list, false);
            }
            break;
            case 44: /* reduce AAparametros2Parametros */
            {
                ArrayList<Object> list = new44();
                push(goTo(13), list, false);
            }
            break;
            case 45: /* reduce AAparam1Param */
            {
                ArrayList<Object> list = new45();
                push(goTo(14), list, false);
            }
            break;
            case 46: /* reduce AAparam2Param */
            {
                ArrayList<Object> list = new46();
                push(goTo(14), list, false);
            }
            break;
            case 47: /* reduce AParamAux */
            {
                ArrayList<Object> list = new47();
                push(goTo(15), list, false);
            }
            break;
            case 48: /* reduce AParametro */
            {
                ArrayList<Object> list = new48();
                push(goTo(16), list, false);
            }
            break;
            case 49: /* reduce ASemicolon */
            {
                ArrayList<Object> list = new49();
                push(goTo(17), list, false);
            }
            break;
            case 50: /* reduce AStatementComando */
            {
                ArrayList<Object> list = new50();
                push(goTo(18), list, false);
            }
            break;
            case 51: /* reduce ADirectStatementComando */
            {
                ArrayList<Object> list = new51();
                push(goTo(18), list, false);
            }
            break;
            case 52: /* reduce ASeStatement */
            {
                ArrayList<Object> list = new52();
                push(goTo(19), list, false);
            }
            break;
            case 53: /* reduce ASeAbertoStatement */
            {
                ArrayList<Object> list = new53();
                push(goTo(19), list, false);
            }
            break;
            case 54: /* reduce ASeSenaoStatement */
            {
                ArrayList<Object> list = new54();
                push(goTo(19), list, false);
            }
            break;
            case 55: /* reduce AEnquantoStatement */
            {
                ArrayList<Object> list = new55();
                push(goTo(19), list, false);
            }
            break;
            case 56: /* reduce AArrodeieStatement */
            {
                ArrayList<Object> list = new56();
                push(goTo(19), list, false);
            }
            break;
            case 57: /* reduce ADirectStatement */
            {
                ArrayList<Object> list = new57();
                push(goTo(20), list, false);
            }
            break;
            case 58: /* reduce ASeSenaoDirectDirectStatement */
            {
                ArrayList<Object> list = new58();
                push(goTo(20), list, false);
            }
            break;
            case 59: /* reduce AEnquantoDirectDirectStatement */
            {
                ArrayList<Object> list = new59();
                push(goTo(20), list, false);
            }
            break;
            case 60: /* reduce AArrodeieDirectDirectStatement */
            {
                ArrayList<Object> list = new60();
                push(goTo(20), list, false);
            }
            break;
            case 61: /* reduce AMandeDeVoltaBasicStatement */
            {
                ArrayList<Object> list = new61();
                push(goTo(21), list, false);
            }
            break;
            case 62: /* reduce AAtribuicaoBasicStatement */
            {
                ArrayList<Object> list = new62();
                push(goTo(21), list, false);
            }
            break;
            case 63: /* reduce ABlocoBasicStatement */
            {
                ArrayList<Object> list = new63();
                push(goTo(21), list, false);
            }
            break;
            case 64: /* reduce AChamadaBasicStatement */
            {
                ArrayList<Object> list = new64();
                push(goTo(21), list, false);
            }
            break;
            case 65: /* reduce AAlistanomes1ListaNomes */
            {
                ArrayList<Object> list = new65();
                push(goTo(22), list, false);
            }
            break;
            case 66: /* reduce AAlistanomes2ListaNomes */
            {
                ArrayList<Object> list = new66();
                push(goTo(22), list, false);
            }
            break;
            case 67: /* reduce AIdAux */
            {
                ArrayList<Object> list = new67();
                push(goTo(23), list, false);
            }
            break;
            case 68: /* reduce AAtribuicao */
            {
                ArrayList<Object> list = new68();
                push(goTo(24), list, false);
            }
            break;
            case 69: /* reduce AAlistaatrib1ListaAtrib */
            {
                ArrayList<Object> list = new69();
                push(goTo(25), list, false);
            }
            break;
            case 70: /* reduce AAlistaatrib2ListaAtrib */
            {
                ArrayList<Object> list = new70();
                push(goTo(25), list, false);
            }
            break;
            case 71: /* reduce AAtribAux */
            {
                ArrayList<Object> list = new71();
                push(goTo(26), list, false);
            }
            break;
            case 72: /* reduce AIdVar */
            {
                ArrayList<Object> list = new72();
                push(goTo(27), list, false);
            }
            break;
            case 73: /* reduce AVarExpVar */
            {
                ArrayList<Object> list = new73();
                push(goTo(27), list, false);
            }
            break;
            case 74: /* reduce AAchamada1Chamada */
            {
                ArrayList<Object> list = new74();
                push(goTo(28), list, false);
            }
            break;
            case 75: /* reduce AAchamada2Chamada */
            {
                ArrayList<Object> list = new75();
                push(goTo(28), list, false);
            }
            break;
            case 76: /* reduce AAlistaexp1ListaExp */
            {
                ArrayList<Object> list = new76();
                push(goTo(29), list, false);
            }
            break;
            case 77: /* reduce AAlistaexp2ListaExp */
            {
                ArrayList<Object> list = new77();
                push(goTo(29), list, false);
            }
            break;
            case 78: /* reduce AExpAux */
            {
                ArrayList<Object> list = new78();
                push(goTo(30), list, false);
            }
            break;
            case 79: /* reduce ATerminal$DecOrDef */
            {
                ArrayList<Object> list = new79();
                push(goTo(31), list, true);
            }
            break;
            case 80: /* reduce ANonTerminal$DecOrDef */
            {
                ArrayList<Object> list = new80();
                push(goTo(31), list, true);
            }
            break;
            case 81: /* reduce ATerminal$DecVariavel */
            {
                ArrayList<Object> list = new81();
                push(goTo(32), list, true);
            }
            break;
            case 82: /* reduce ANonTerminal$DecVariavel */
            {
                ArrayList<Object> list = new82();
                push(goTo(32), list, true);
            }
            break;
            case 83: /* reduce ATerminal$Comando */
            {
                ArrayList<Object> list = new83();
                push(goTo(33), list, true);
            }
            break;
            case 84: /* reduce ANonTerminal$Comando */
            {
                ArrayList<Object> list = new84();
                push(goTo(33), list, true);
            }
            break;
            case 85: /* reduce ATerminal$ParamAux */
            {
                ArrayList<Object> list = new85();
                push(goTo(34), list, true);
            }
            break;
            case 86: /* reduce ANonTerminal$ParamAux */
            {
                ArrayList<Object> list = new86();
                push(goTo(34), list, true);
            }
            break;
            case 87: /* reduce ATerminal$IdAux */
            {
                ArrayList<Object> list = new87();
                push(goTo(35), list, true);
            }
            break;
            case 88: /* reduce ANonTerminal$IdAux */
            {
                ArrayList<Object> list = new88();
                push(goTo(35), list, true);
            }
            break;
            case 89: /* reduce ATerminal$AtribAux */
            {
                ArrayList<Object> list = new89();
                push(goTo(36), list, true);
            }
            break;
            case 90: /* reduce ANonTerminal$AtribAux */
            {
                ArrayList<Object> list = new90();
                push(goTo(36), list, true);
            }
            break;
            case 91: /* reduce ATerminal$ExpAux */
            {
                ArrayList<Object> list = new91();
                push(goTo(37), list, true);
            }
            break;
            case 92: /* reduce ANonTerminal$ExpAux */
            {
                ArrayList<Object> list = new92();
                push(goTo(37), list, true);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AAprograma1Programa */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PPrograma pprogramaNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        }

        pprogramaNode1 = new APrograma(listNode2);
        }
	nodeList.add(pprogramaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAprograma2Programa */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrograma pprogramaNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pprogramaNode1 = new APrograma(listNode3);
        }
	nodeList.add(pprogramaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce ADecVariavelDecOrDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecOrDef pdecordefNode1;
        {
            // Block
        PDecVariavel pdecvariavelNode2;
        pdecvariavelNode2 = (PDecVariavel)nodeArrayList1.get(0);

        pdecordefNode1 = new ADecVariavelDecOrDef(pdecvariavelNode2);
        }
	nodeList.add(pdecordefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce ADecFuncaoDecOrDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecOrDef pdecordefNode1;
        {
            // Block
        PDecFuncao pdecfuncaoNode2;
        pdecfuncaoNode2 = (PDecFuncao)nodeArrayList1.get(0);

        pdecordefNode1 = new ADecFuncaoDecOrDef(pdecfuncaoNode2);
        }
	nodeList.add(pdecordefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce ADecVariavel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecVariavel pdecvariavelNode1;
        {
            // Block
        PTipo ptipoNode2;
        PListaNomes plistanomesNode3;
        PSemicolon psemicolonNode4;
        ptipoNode2 = (PTipo)nodeArrayList1.get(0);
        plistanomesNode3 = (PListaNomes)nodeArrayList2.get(0);
        psemicolonNode4 = (PSemicolon)nodeArrayList3.get(0);

        pdecvariavelNode1 = new ADecVariavel(ptipoNode2, plistanomesNode3, psemicolonNode4);
        }
	nodeList.add(pdecvariavelNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce ATipoTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        PTipoBase ptipobaseNode2;
        ptipobaseNode2 = (PTipoBase)nodeArrayList1.get(0);

        ptipoNode1 = new ATipoTipo(ptipobaseNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AVetorTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TRuma trumaNode2;
        TDe tdeNode3;
        PTipoBase ptipobaseNode4;
        TColEsq tcolesqNode5;
        PExp pexpNode6;
        TColDir tcoldirNode7;
        trumaNode2 = (TRuma)nodeArrayList1.get(0);
        tdeNode3 = (TDe)nodeArrayList2.get(0);
        ptipobaseNode4 = (PTipoBase)nodeArrayList3.get(0);
        tcolesqNode5 = (TColEsq)nodeArrayList4.get(0);
        pexpNode6 = (PExp)nodeArrayList5.get(0);
        tcoldirNode7 = (TColDir)nodeArrayList6.get(0);

        ptipoNode1 = new AVetorTipo(trumaNode2, tdeNode3, ptipobaseNode4, tcolesqNode5, pexpNode6, tcoldirNode7);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AIntTipoBase */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoBase ptipobaseNode1;
        {
            // Block
        TInt tintNode2;
        tintNode2 = (TInt)nodeArrayList1.get(0);

        ptipobaseNode1 = new AIntTipoBase(tintNode2);
        }
	nodeList.add(ptipobaseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce ACaractereTipoBase */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoBase ptipobaseNode1;
        {
            // Block
        TChar tcharNode2;
        tcharNode2 = (TChar)nodeArrayList1.get(0);

        ptipobaseNode1 = new ACaractereTipoBase(tcharNode2);
        }
	nodeList.add(ptipobaseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AFloatTipoBase */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoBase ptipobaseNode1;
        {
            // Block
        TFloat tfloatNode2;
        tfloatNode2 = (TFloat)nodeArrayList1.get(0);

        ptipobaseNode1 = new AFloatTipoBase(tfloatNode2);
        }
	nodeList.add(ptipobaseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce ABoolTipoBase */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoBase ptipobaseNode1;
        {
            // Block
        TBool tboolNode2;
        tboolNode2 = (TBool)nodeArrayList1.get(0);

        ptipobaseNode1 = new ABoolTipoBase(tboolNode2);
        }
	nodeList.add(ptipobaseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AOpcaoExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        POpcao popcaoNode2;
        popcaoNode2 = (POpcao)nodeArrayList1.get(0);

        pexpNode1 = new AOpcaoExp(popcaoNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AIgualExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TIgual tigualNode3;
        POpcao popcaoNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tigualNode3 = (TIgual)nodeArrayList2.get(0);
        popcaoNode4 = (POpcao)nodeArrayList3.get(0);

        pexpNode1 = new AIgualExp(pexpNode2, tigualNode3, popcaoNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AMenorIgualExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TMenorIg tmenorigNode3;
        POpcao popcaoNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tmenorigNode3 = (TMenorIg)nodeArrayList2.get(0);
        popcaoNode4 = (POpcao)nodeArrayList3.get(0);

        pexpNode1 = new AMenorIgualExp(pexpNode2, tmenorigNode3, popcaoNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AMaiorIgualExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TMaiorIg tmaiorigNode3;
        POpcao popcaoNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tmaiorigNode3 = (TMaiorIg)nodeArrayList2.get(0);
        popcaoNode4 = (POpcao)nodeArrayList3.get(0);

        pexpNode1 = new AMaiorIgualExp(pexpNode2, tmaiorigNode3, popcaoNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AMenorExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TMenor tmenorNode3;
        POpcao popcaoNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tmenorNode3 = (TMenor)nodeArrayList2.get(0);
        popcaoNode4 = (POpcao)nodeArrayList3.get(0);

        pexpNode1 = new AMenorExp(pexpNode2, tmenorNode3, popcaoNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AMaiorExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TMaior tmaiorNode3;
        POpcao popcaoNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tmaiorNode3 = (TMaior)nodeArrayList2.get(0);
        popcaoNode4 = (POpcao)nodeArrayList3.get(0);

        pexpNode1 = new AMaiorExp(pexpNode2, tmaiorNode3, popcaoNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce ANegacaoExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TNot tnotNode2;
        POpcao popcaoNode3;
        tnotNode2 = (TNot)nodeArrayList1.get(0);
        popcaoNode3 = (POpcao)nodeArrayList2.get(0);

        pexpNode1 = new ANegacaoExp(tnotNode2, popcaoNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AAndExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TAnd tandNode3;
        POpcao popcaoNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tandNode3 = (TAnd)nodeArrayList2.get(0);
        popcaoNode4 = (POpcao)nodeArrayList3.get(0);

        pexpNode1 = new AAndExp(pexpNode2, tandNode3, popcaoNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AOrExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TOr torNode3;
        POpcao popcaoNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        torNode3 = (TOr)nodeArrayList2.get(0);
        popcaoNode4 = (POpcao)nodeArrayList3.get(0);

        pexpNode1 = new AOrExp(pexpNode2, torNode3, popcaoNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AFatorOpcao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POpcao popcaoNode1;
        {
            // Block
        PFator pfatorNode2;
        pfatorNode2 = (PFator)nodeArrayList1.get(0);

        popcaoNode1 = new AFatorOpcao(pfatorNode2);
        }
	nodeList.add(popcaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce ASomaOpcao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POpcao popcaoNode1;
        {
            // Block
        POpcao popcaoNode2;
        TSoma tsomaNode3;
        PFator pfatorNode4;
        popcaoNode2 = (POpcao)nodeArrayList1.get(0);
        tsomaNode3 = (TSoma)nodeArrayList2.get(0);
        pfatorNode4 = (PFator)nodeArrayList3.get(0);

        popcaoNode1 = new ASomaOpcao(popcaoNode2, tsomaNode3, pfatorNode4);
        }
	nodeList.add(popcaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce ASubOpcao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POpcao popcaoNode1;
        {
            // Block
        POpcao popcaoNode2;
        TSubt tsubtNode3;
        PFator pfatorNode4;
        popcaoNode2 = (POpcao)nodeArrayList1.get(0);
        tsubtNode3 = (TSubt)nodeArrayList2.get(0);
        pfatorNode4 = (PFator)nodeArrayList3.get(0);

        popcaoNode1 = new ASubOpcao(popcaoNode2, tsubtNode3, pfatorNode4);
        }
	nodeList.add(popcaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce ATermoFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFator pfatorNode1;
        {
            // Block
        PTermo ptermoNode2;
        ptermoNode2 = (PTermo)nodeArrayList1.get(0);

        pfatorNode1 = new ATermoFator(ptermoNode2);
        }
	nodeList.add(pfatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AMultFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFator pfatorNode1;
        {
            // Block
        PFator pfatorNode2;
        TMult tmultNode3;
        PTermo ptermoNode4;
        pfatorNode2 = (PFator)nodeArrayList1.get(0);
        tmultNode3 = (TMult)nodeArrayList2.get(0);
        ptermoNode4 = (PTermo)nodeArrayList3.get(0);

        pfatorNode1 = new AMultFator(pfatorNode2, tmultNode3, ptermoNode4);
        }
	nodeList.add(pfatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce ADivFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFator pfatorNode1;
        {
            // Block
        PFator pfatorNode2;
        TDiv tdivNode3;
        PTermo ptermoNode4;
        pfatorNode2 = (PFator)nodeArrayList1.get(0);
        tdivNode3 = (TDiv)nodeArrayList2.get(0);
        ptermoNode4 = (PTermo)nodeArrayList3.get(0);

        pfatorNode1 = new ADivFator(pfatorNode2, tdivNode3, ptermoNode4);
        }
	nodeList.add(pfatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AVarTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTermo ptermoNode1;
        {
            // Block
        PVar pvarNode2;
        pvarNode2 = (PVar)nodeArrayList1.get(0);

        ptermoNode1 = new AVarTermo(pvarNode2);
        }
	nodeList.add(ptermoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AVariavelTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTermo ptermoNode1;
        {
            // Block
        PVariavel pvariavelNode2;
        pvariavelNode2 = (PVariavel)nodeArrayList1.get(0);

        ptermoNode1 = new AVariavelTermo(pvariavelNode2);
        }
	nodeList.add(ptermoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce APrioridadeTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTermo ptermoNode1;
        {
            // Block
        TParEsq tparesqNode2;
        PExp pexpNode3;
        TParDir tpardirNode4;
        tparesqNode2 = (TParEsq)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        tpardirNode4 = (TParDir)nodeArrayList3.get(0);

        ptermoNode1 = new APrioridadeTermo(tparesqNode2, pexpNode3, tpardirNode4);
        }
	nodeList.add(ptermoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce ACallingTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTermo ptermoNode1;
        {
            // Block
        PChamada pchamadaNode2;
        pchamadaNode2 = (PChamada)nodeArrayList1.get(0);

        ptermoNode1 = new ACallingTermo(pchamadaNode2);
        }
	nodeList.add(ptermoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce ANumInteiroVariavel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariavel pvariavelNode1;
        {
            // Block
        TNumInteiro tnuminteiroNode2;
        tnuminteiroNode2 = (TNumInteiro)nodeArrayList1.get(0);

        pvariavelNode1 = new ANumInteiroVariavel(tnuminteiroNode2);
        }
	nodeList.add(pvariavelNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce ANumRealVariavel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariavel pvariavelNode1;
        {
            // Block
        TNumReal tnumrealNode2;
        tnumrealNode2 = (TNumReal)nodeArrayList1.get(0);

        pvariavelNode1 = new ANumRealVariavel(tnumrealNode2);
        }
	nodeList.add(pvariavelNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce ACaractereVariavel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariavel pvariavelNode1;
        {
            // Block
        TCaractere tcaractereNode2;
        tcaractereNode2 = (TCaractere)nodeArrayList1.get(0);

        pvariavelNode1 = new ACaractereVariavel(tcaractereNode2);
        }
	nodeList.add(pvariavelNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce ABoolSimVariavel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariavel pvariavelNode1;
        {
            // Block
        TSim tsimNode2;
        tsimNode2 = (TSim)nodeArrayList1.get(0);

        pvariavelNode1 = new ABoolSimVariavel(tsimNode2);
        }
	nodeList.add(pvariavelNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce ABoolNaoVariavel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariavel pvariavelNode1;
        {
            // Block
        TNao tnaoNode2;
        tnaoNode2 = (TNao)nodeArrayList1.get(0);

        pvariavelNode1 = new ABoolNaoVariavel(tnaoNode2);
        }
	nodeList.add(pvariavelNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AStringVariavel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariavel pvariavelNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        pvariavelNode1 = new AStringVariavel(tstringNode2);
        }
	nodeList.add(pvariavelNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce ADecFuncao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecFuncao pdecfuncaoNode1;
        {
            // Block
        TArrume tarrumeNode2;
        PTipoRetorno ptiporetornoNode3;
        TAssim tassimNode4;
        TDoisPt tdoisptNode5;
        TId tidNode6;
        TParEsq tparesqNode7;
        PParametros pparametrosNode8;
        TParDir tpardirNode9;
        PBloco pblocoNode10;
        tarrumeNode2 = (TArrume)nodeArrayList1.get(0);
        ptiporetornoNode3 = (PTipoRetorno)nodeArrayList2.get(0);
        tassimNode4 = (TAssim)nodeArrayList3.get(0);
        tdoisptNode5 = (TDoisPt)nodeArrayList4.get(0);
        tidNode6 = (TId)nodeArrayList5.get(0);
        tparesqNode7 = (TParEsq)nodeArrayList6.get(0);
        pparametrosNode8 = (PParametros)nodeArrayList7.get(0);
        tpardirNode9 = (TParDir)nodeArrayList8.get(0);
        pblocoNode10 = (PBloco)nodeArrayList9.get(0);

        pdecfuncaoNode1 = new ADecFuncao(tarrumeNode2, ptiporetornoNode3, tassimNode4, tdoisptNode5, tidNode6, tparesqNode7, pparametrosNode8, tpardirNode9, pblocoNode10);
        }
	nodeList.add(pdecfuncaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce ATipoTipoRetorno */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoRetorno ptiporetornoNode1;
        {
            // Block
        PTipo ptipoNode2;
        ptipoNode2 = (PTipo)nodeArrayList1.get(0);

        ptiporetornoNode1 = new ATipoTipoRetorno(ptipoNode2);
        }
	nodeList.add(ptiporetornoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce ANadaTipoRetorno */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoRetorno ptiporetornoNode1;
        {
            // Block
        TNada tnadaNode2;
        tnadaNode2 = (TNada)nodeArrayList1.get(0);

        ptiporetornoNode1 = new ANadaTipoRetorno(tnadaNode2);
        }
	nodeList.add(ptiporetornoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AAbloco1Bloco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBloco pblocoNode1;
        {
            // Block
        TInicio tinicioNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TFim tfimNode5;
        tinicioNode2 = (TInicio)nodeArrayList1.get(0);
        {
            // Block
        }
        {
            // Block
        }
        tfimNode5 = (TFim)nodeArrayList2.get(0);

        pblocoNode1 = new ABloco(tinicioNode2, listNode3, listNode4, tfimNode5);
        }
	nodeList.add(pblocoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AAbloco2Bloco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBloco pblocoNode1;
        {
            // Block
        TInicio tinicioNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TFim tfimNode6;
        tinicioNode2 = (TInicio)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        }
        tfimNode6 = (TFim)nodeArrayList3.get(0);

        pblocoNode1 = new ABloco(tinicioNode2, listNode4, listNode5, tfimNode6);
        }
	nodeList.add(pblocoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AAbloco3Bloco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBloco pblocoNode1;
        {
            // Block
        TInicio tinicioNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TFim tfimNode6;
        tinicioNode2 = (TInicio)nodeArrayList1.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        tfimNode6 = (TFim)nodeArrayList3.get(0);

        pblocoNode1 = new ABloco(tinicioNode2, listNode3, listNode5, tfimNode6);
        }
	nodeList.add(pblocoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AAbloco4Bloco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBloco pblocoNode1;
        {
            // Block
        TInicio tinicioNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        TFim tfimNode7;
        tinicioNode2 = (TInicio)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList3.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        tfimNode7 = (TFim)nodeArrayList4.get(0);

        pblocoNode1 = new ABloco(tinicioNode2, listNode4, listNode6, tfimNode7);
        }
	nodeList.add(pblocoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AAparametros1Parametros */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PParametros pparametrosNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;

        pparametrosNode1 = new AParametros(null);
        }
	nodeList.add(pparametrosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AAparametros2Parametros */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParametros pparametrosNode1;
        {
            // Block
        PParam pparamNode2;
        pparamNode2 = (PParam)nodeArrayList1.get(0);

        pparametrosNode1 = new AParametros(pparamNode2);
        }
	nodeList.add(pparametrosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AAparam1Param */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParam pparamNode1;
        {
            // Block
        PParametro pparametroNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pparametroNode2 = (PParametro)nodeArrayList1.get(0);
        {
            // Block
        }

        pparamNode1 = new AParam(pparametroNode2, listNode3);
        }
	nodeList.add(pparamNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AAparam2Param */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParam pparamNode1;
        {
            // Block
        PParametro pparametroNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pparametroNode2 = (PParametro)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pparamNode1 = new AParam(pparametroNode2, listNode4);
        }
	nodeList.add(pparamNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AParamAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParamAux pparamauxNode1;
        {
            // Block
        TSepParam tsepparamNode2;
        PParametro pparametroNode3;
        tsepparamNode2 = (TSepParam)nodeArrayList1.get(0);
        pparametroNode3 = (PParametro)nodeArrayList2.get(0);

        pparamauxNode1 = new AParamAux(tsepparamNode2, pparametroNode3);
        }
	nodeList.add(pparamauxNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AParametro */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParametro pparametroNode1;
        {
            // Block
        PTipo ptipoNode2;
        TId tidNode3;
        ptipoNode2 = (PTipo)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);

        pparametroNode1 = new AParametro(ptipoNode2, tidNode3);
        }
	nodeList.add(pparametroNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce ASemicolon */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSemicolon psemicolonNode1;
        {
            // Block
        TPtVirgula tptvirgulaNode2;
        tptvirgulaNode2 = (TPtVirgula)nodeArrayList1.get(0);

        psemicolonNode1 = new ASemicolon(tptvirgulaNode2);
        }
	nodeList.add(psemicolonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AStatementComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PStatement pstatementNode2;
        pstatementNode2 = (PStatement)nodeArrayList1.get(0);

        pcomandoNode1 = new AStatementComando(pstatementNode2);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce ADirectStatementComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PDirectStatement pdirectstatementNode2;
        pdirectstatementNode2 = (PDirectStatement)nodeArrayList1.get(0);

        pcomandoNode1 = new ADirectStatementComando(pdirectstatementNode2);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce ASeStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TIf tifNode2;
        TParEsq tparesqNode3;
        PExp pexpNode4;
        TParDir tpardirNode5;
        PBasicStatement pbasicstatementNode6;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        tparesqNode3 = (TParEsq)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        tpardirNode5 = (TParDir)nodeArrayList4.get(0);
        pbasicstatementNode6 = (PBasicStatement)nodeArrayList5.get(0);

        pstatementNode1 = new ASeStatement(tifNode2, tparesqNode3, pexpNode4, tpardirNode5, pbasicstatementNode6);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce ASeAbertoStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TIf tifNode2;
        TParEsq tparesqNode3;
        PExp pexpNode4;
        TParDir tpardirNode5;
        PStatement pstatementNode6;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        tparesqNode3 = (TParEsq)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        tpardirNode5 = (TParDir)nodeArrayList4.get(0);
        pstatementNode6 = (PStatement)nodeArrayList5.get(0);

        pstatementNode1 = new ASeAbertoStatement(tifNode2, tparesqNode3, pexpNode4, tpardirNode5, pstatementNode6);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce ASeSenaoStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TIf tifNode2;
        TParEsq tparesqNode3;
        PExp pexpNode4;
        TParDir tpardirNode5;
        PDirectStatement pdirectstatementNode6;
        TElse telseNode7;
        PStatement pstatementNode8;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        tparesqNode3 = (TParEsq)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        tpardirNode5 = (TParDir)nodeArrayList4.get(0);
        pdirectstatementNode6 = (PDirectStatement)nodeArrayList5.get(0);
        telseNode7 = (TElse)nodeArrayList6.get(0);
        pstatementNode8 = (PStatement)nodeArrayList7.get(0);

        pstatementNode1 = new ASeSenaoStatement(tifNode2, tparesqNode3, pexpNode4, tpardirNode5, pdirectstatementNode6, telseNode7, pstatementNode8);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AEnquantoStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TWhile twhileNode2;
        TParEsq tparesqNode3;
        PExp pexpNode4;
        TParDir tpardirNode5;
        TRepeat trepeatNode6;
        PStatement pstatementNode7;
        twhileNode2 = (TWhile)nodeArrayList1.get(0);
        tparesqNode3 = (TParEsq)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        tpardirNode5 = (TParDir)nodeArrayList4.get(0);
        trepeatNode6 = (TRepeat)nodeArrayList5.get(0);
        pstatementNode7 = (PStatement)nodeArrayList6.get(0);

        pstatementNode1 = new AEnquantoStatement(twhileNode2, tparesqNode3, pexpNode4, tpardirNode5, trepeatNode6, pstatementNode7);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AArrodeieStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TFor tforNode2;
        TParEsq tparesqNode3;
        PListaAtrib plistaatribNode4;
        TPtVirgula tptvirgulaNode5;
        PExp pexpNode6;
        TPtVirgula tptvirgulaNode7;
        PListaAtrib plistaatribNode8;
        TParDir tpardirNode9;
        PStatement pstatementNode10;
        tforNode2 = (TFor)nodeArrayList1.get(0);
        tparesqNode3 = (TParEsq)nodeArrayList2.get(0);
        plistaatribNode4 = (PListaAtrib)nodeArrayList3.get(0);
        tptvirgulaNode5 = (TPtVirgula)nodeArrayList4.get(0);
        pexpNode6 = (PExp)nodeArrayList5.get(0);
        tptvirgulaNode7 = (TPtVirgula)nodeArrayList6.get(0);
        plistaatribNode8 = (PListaAtrib)nodeArrayList7.get(0);
        tpardirNode9 = (TParDir)nodeArrayList8.get(0);
        pstatementNode10 = (PStatement)nodeArrayList9.get(0);

        pstatementNode1 = new AArrodeieStatement(tforNode2, tparesqNode3, plistaatribNode4, tptvirgulaNode5, pexpNode6, tptvirgulaNode7, plistaatribNode8, tpardirNode9, pstatementNode10);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce ADirectStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDirectStatement pdirectstatementNode1;
        {
            // Block
        PBasicStatement pbasicstatementNode2;
        pbasicstatementNode2 = (PBasicStatement)nodeArrayList1.get(0);

        pdirectstatementNode1 = new ADirectStatement(pbasicstatementNode2);
        }
	nodeList.add(pdirectstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce ASeSenaoDirectDirectStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDirectStatement pdirectstatementNode1;
        {
            // Block
        TIf tifNode2;
        TParEsq tparesqNode3;
        PExp pexpNode4;
        TParDir tpardirNode5;
        PDirectStatement pdirectstatementNode6;
        TElse telseNode7;
        PDirectStatement pdirectstatementNode8;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        tparesqNode3 = (TParEsq)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        tpardirNode5 = (TParDir)nodeArrayList4.get(0);
        pdirectstatementNode6 = (PDirectStatement)nodeArrayList5.get(0);
        telseNode7 = (TElse)nodeArrayList6.get(0);
        pdirectstatementNode8 = (PDirectStatement)nodeArrayList7.get(0);

        pdirectstatementNode1 = new ASeSenaoDirectDirectStatement(tifNode2, tparesqNode3, pexpNode4, tpardirNode5, pdirectstatementNode6, telseNode7, pdirectstatementNode8);
        }
	nodeList.add(pdirectstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce AEnquantoDirectDirectStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDirectStatement pdirectstatementNode1;
        {
            // Block
        TWhile twhileNode2;
        TParEsq tparesqNode3;
        PExp pexpNode4;
        TParDir tpardirNode5;
        TRepeat trepeatNode6;
        PDirectStatement pdirectstatementNode7;
        twhileNode2 = (TWhile)nodeArrayList1.get(0);
        tparesqNode3 = (TParEsq)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        tpardirNode5 = (TParDir)nodeArrayList4.get(0);
        trepeatNode6 = (TRepeat)nodeArrayList5.get(0);
        pdirectstatementNode7 = (PDirectStatement)nodeArrayList6.get(0);

        pdirectstatementNode1 = new AEnquantoDirectDirectStatement(twhileNode2, tparesqNode3, pexpNode4, tpardirNode5, trepeatNode6, pdirectstatementNode7);
        }
	nodeList.add(pdirectstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AArrodeieDirectDirectStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDirectStatement pdirectstatementNode1;
        {
            // Block
        TFor tforNode2;
        TParEsq tparesqNode3;
        PListaAtrib plistaatribNode4;
        TPtVirgula tptvirgulaNode5;
        PExp pexpNode6;
        TPtVirgula tptvirgulaNode7;
        PListaAtrib plistaatribNode8;
        TParDir tpardirNode9;
        PDirectStatement pdirectstatementNode10;
        tforNode2 = (TFor)nodeArrayList1.get(0);
        tparesqNode3 = (TParEsq)nodeArrayList2.get(0);
        plistaatribNode4 = (PListaAtrib)nodeArrayList3.get(0);
        tptvirgulaNode5 = (TPtVirgula)nodeArrayList4.get(0);
        pexpNode6 = (PExp)nodeArrayList5.get(0);
        tptvirgulaNode7 = (TPtVirgula)nodeArrayList6.get(0);
        plistaatribNode8 = (PListaAtrib)nodeArrayList7.get(0);
        tpardirNode9 = (TParDir)nodeArrayList8.get(0);
        pdirectstatementNode10 = (PDirectStatement)nodeArrayList9.get(0);

        pdirectstatementNode1 = new AArrodeieDirectDirectStatement(tforNode2, tparesqNode3, plistaatribNode4, tptvirgulaNode5, pexpNode6, tptvirgulaNode7, plistaatribNode8, tpardirNode9, pdirectstatementNode10);
        }
	nodeList.add(pdirectstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce AMandeDeVoltaBasicStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBasicStatement pbasicstatementNode1;
        {
            // Block
        TMande tmandeNode2;
        TDe tdeNode3;
        TVolta tvoltaNode4;
        PExp pexpNode5;
        PSemicolon psemicolonNode6;
        tmandeNode2 = (TMande)nodeArrayList1.get(0);
        tdeNode3 = (TDe)nodeArrayList2.get(0);
        tvoltaNode4 = (TVolta)nodeArrayList3.get(0);
        pexpNode5 = (PExp)nodeArrayList4.get(0);
        psemicolonNode6 = (PSemicolon)nodeArrayList5.get(0);

        pbasicstatementNode1 = new AMandeDeVoltaBasicStatement(tmandeNode2, tdeNode3, tvoltaNode4, pexpNode5, psemicolonNode6);
        }
	nodeList.add(pbasicstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce AAtribuicaoBasicStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBasicStatement pbasicstatementNode1;
        {
            // Block
        PAtribuicao patribuicaoNode2;
        PSemicolon psemicolonNode3;
        patribuicaoNode2 = (PAtribuicao)nodeArrayList1.get(0);
        psemicolonNode3 = (PSemicolon)nodeArrayList2.get(0);

        pbasicstatementNode1 = new AAtribuicaoBasicStatement(patribuicaoNode2, psemicolonNode3);
        }
	nodeList.add(pbasicstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce ABlocoBasicStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBasicStatement pbasicstatementNode1;
        {
            // Block
        PBloco pblocoNode2;
        pblocoNode2 = (PBloco)nodeArrayList1.get(0);

        pbasicstatementNode1 = new ABlocoBasicStatement(pblocoNode2);
        }
	nodeList.add(pbasicstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce AChamadaBasicStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBasicStatement pbasicstatementNode1;
        {
            // Block
        PChamada pchamadaNode2;
        PSemicolon psemicolonNode3;
        pchamadaNode2 = (PChamada)nodeArrayList1.get(0);
        psemicolonNode3 = (PSemicolon)nodeArrayList2.get(0);

        pbasicstatementNode1 = new AChamadaBasicStatement(pchamadaNode2, psemicolonNode3);
        }
	nodeList.add(pbasicstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce AAlistanomes1ListaNomes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListaNomes plistanomesNode1;
        {
            // Block
        TId tidNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
        }

        plistanomesNode1 = new AListaNomes(tidNode2, listNode3);
        }
	nodeList.add(plistanomesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce AAlistanomes2ListaNomes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListaNomes plistanomesNode1;
        {
            // Block
        TId tidNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        plistanomesNode1 = new AListaNomes(tidNode2, listNode4);
        }
	nodeList.add(plistanomesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce AIdAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIdAux pidauxNode1;
        {
            // Block
        TVirgula tvirgulaNode2;
        TId tidNode3;
        tvirgulaNode2 = (TVirgula)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);

        pidauxNode1 = new AIdAux(tvirgulaNode2, tidNode3);
        }
	nodeList.add(pidauxNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce AAtribuicao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAtribuicao patribuicaoNode1;
        {
            // Block
        PVar pvarNode2;
        TAtrib tatribNode3;
        PExp pexpNode4;
        pvarNode2 = (PVar)nodeArrayList1.get(0);
        tatribNode3 = (TAtrib)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);

        patribuicaoNode1 = new AAtribuicao(pvarNode2, tatribNode3, pexpNode4);
        }
	nodeList.add(patribuicaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce AAlistaatrib1ListaAtrib */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListaAtrib plistaatribNode1;
        {
            // Block
        PAtribuicao patribuicaoNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        patribuicaoNode2 = (PAtribuicao)nodeArrayList1.get(0);
        {
            // Block
        }

        plistaatribNode1 = new AListaAtrib(patribuicaoNode2, listNode3);
        }
	nodeList.add(plistaatribNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce AAlistaatrib2ListaAtrib */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListaAtrib plistaatribNode1;
        {
            // Block
        PAtribuicao patribuicaoNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        patribuicaoNode2 = (PAtribuicao)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        plistaatribNode1 = new AListaAtrib(patribuicaoNode2, listNode4);
        }
	nodeList.add(plistaatribNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce AAtribAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAtribAux patribauxNode1;
        {
            // Block
        TVirgula tvirgulaNode2;
        PAtribuicao patribuicaoNode3;
        tvirgulaNode2 = (TVirgula)nodeArrayList1.get(0);
        patribuicaoNode3 = (PAtribuicao)nodeArrayList2.get(0);

        patribauxNode1 = new AAtribAux(tvirgulaNode2, patribuicaoNode3);
        }
	nodeList.add(patribauxNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce AIdVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pvarNode1 = new AIdVar(tidNode2);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce AVarExpVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        PVar pvarNode2;
        TColEsq tcolesqNode3;
        PExp pexpNode4;
        TColDir tcoldirNode5;
        pvarNode2 = (PVar)nodeArrayList1.get(0);
        tcolesqNode3 = (TColEsq)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        tcoldirNode5 = (TColDir)nodeArrayList4.get(0);

        pvarNode1 = new AVarExpVar(pvarNode2, tcolesqNode3, pexpNode4, tcoldirNode5);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce AAchamada1Chamada */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PChamada pchamadaNode1;
        {
            // Block
        TId tidNode2;
        TParEsq tparesqNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TParDir tpardirNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tparesqNode3 = (TParEsq)nodeArrayList2.get(0);
        tpardirNode5 = (TParDir)nodeArrayList3.get(0);

        pchamadaNode1 = new AChamada(tidNode2, tparesqNode3, null, tpardirNode5);
        }
	nodeList.add(pchamadaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce AAchamada2Chamada */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PChamada pchamadaNode1;
        {
            // Block
        TId tidNode2;
        TParEsq tparesqNode3;
        PListaExp plistaexpNode4;
        TParDir tpardirNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tparesqNode3 = (TParEsq)nodeArrayList2.get(0);
        plistaexpNode4 = (PListaExp)nodeArrayList3.get(0);
        tpardirNode5 = (TParDir)nodeArrayList4.get(0);

        pchamadaNode1 = new AChamada(tidNode2, tparesqNode3, plistaexpNode4, tpardirNode5);
        }
	nodeList.add(pchamadaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce AAlistaexp1ListaExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListaExp plistaexpNode1;
        {
            // Block
        PExp pexpNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        {
            // Block
        }

        plistaexpNode1 = new AListaExp(pexpNode2, listNode3);
        }
	nodeList.add(plistaexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new77() /* reduce AAlistaexp2ListaExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListaExp plistaexpNode1;
        {
            // Block
        PExp pexpNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        plistaexpNode1 = new AListaExp(pexpNode2, listNode4);
        }
	nodeList.add(plistaexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new78() /* reduce AExpAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpAux pexpauxNode1;
        {
            // Block
        TSepParam tsepparamNode2;
        PExp pexpNode3;
        tsepparamNode2 = (TSepParam)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);

        pexpauxNode1 = new AExpAux(tsepparamNode2, pexpNode3);
        }
	nodeList.add(pexpauxNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new79() /* reduce ATerminal$DecOrDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PDecOrDef pdecordefNode1;
        pdecordefNode1 = (PDecOrDef)nodeArrayList1.get(0);
	if(pdecordefNode1 != null)
	{
	  listNode2.add(pdecordefNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new80() /* reduce ANonTerminal$DecOrDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PDecOrDef pdecordefNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pdecordefNode2 = (PDecOrDef)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pdecordefNode2 != null)
	{
	  listNode3.add(pdecordefNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new81() /* reduce ATerminal$DecVariavel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PDecVariavel pdecvariavelNode1;
        pdecvariavelNode1 = (PDecVariavel)nodeArrayList1.get(0);
	if(pdecvariavelNode1 != null)
	{
	  listNode2.add(pdecvariavelNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new82() /* reduce ANonTerminal$DecVariavel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PDecVariavel pdecvariavelNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pdecvariavelNode2 = (PDecVariavel)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pdecvariavelNode2 != null)
	{
	  listNode3.add(pdecvariavelNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new83() /* reduce ATerminal$Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PComando pcomandoNode1;
        pcomandoNode1 = (PComando)nodeArrayList1.get(0);
	if(pcomandoNode1 != null)
	{
	  listNode2.add(pcomandoNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new84() /* reduce ANonTerminal$Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PComando pcomandoNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pcomandoNode2 = (PComando)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcomandoNode2 != null)
	{
	  listNode3.add(pcomandoNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new85() /* reduce ATerminal$ParamAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PParamAux pparamauxNode1;
        pparamauxNode1 = (PParamAux)nodeArrayList1.get(0);
	if(pparamauxNode1 != null)
	{
	  listNode2.add(pparamauxNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new86() /* reduce ANonTerminal$ParamAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PParamAux pparamauxNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pparamauxNode2 = (PParamAux)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pparamauxNode2 != null)
	{
	  listNode3.add(pparamauxNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new87() /* reduce ATerminal$IdAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PIdAux pidauxNode1;
        pidauxNode1 = (PIdAux)nodeArrayList1.get(0);
	if(pidauxNode1 != null)
	{
	  listNode2.add(pidauxNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new88() /* reduce ANonTerminal$IdAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PIdAux pidauxNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pidauxNode2 = (PIdAux)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pidauxNode2 != null)
	{
	  listNode3.add(pidauxNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new89() /* reduce ATerminal$AtribAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PAtribAux patribauxNode1;
        patribauxNode1 = (PAtribAux)nodeArrayList1.get(0);
	if(patribauxNode1 != null)
	{
	  listNode2.add(patribauxNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new90() /* reduce ANonTerminal$AtribAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PAtribAux patribauxNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        patribauxNode2 = (PAtribAux)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(patribauxNode2 != null)
	{
	  listNode3.add(patribauxNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new91() /* reduce ATerminal$ExpAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PExpAux pexpauxNode1;
        pexpauxNode1 = (PExpAux)nodeArrayList1.get(0);
	if(pexpauxNode1 != null)
	{
	  listNode2.add(pexpauxNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new92() /* reduce ANonTerminal$ExpAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PExpAux pexpauxNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pexpauxNode2 = (PExpAux)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexpauxNode2 != null)
	{
	  listNode3.add(pexpauxNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 0}, {23, SHIFT, 1}, {24, SHIFT, 2}, {25, SHIFT, 3}, {26, SHIFT, 4}, {36, SHIFT, 5}, {40, SHIFT, 6}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 10}, },
			{{-1, ERROR, 5}, {37, SHIFT, 14}, },
			{{-1, ERROR, 6}, {23, SHIFT, 1}, {24, SHIFT, 2}, {25, SHIFT, 3}, {26, SHIFT, 4}, {27, SHIFT, 15}, {36, SHIFT, 5}, },
			{{-1, ERROR, 7}, {47, ACCEPT, -1}, },
			{{-1, REDUCE, 79}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 10}, {46, SHIFT, 18}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 1}, {23, SHIFT, 1}, {24, SHIFT, 2}, {25, SHIFT, 3}, {26, SHIFT, 4}, {36, SHIFT, 5}, {40, SHIFT, 6}, },
			{{-1, ERROR, 14}, {23, SHIFT, 1}, {24, SHIFT, 2}, {25, SHIFT, 3}, {26, SHIFT, 4}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 37}, },
			{{-1, ERROR, 17}, {41, SHIFT, 22}, },
			{{-1, REDUCE, 65}, {22, SHIFT, 23}, },
			{{-1, ERROR, 19}, {20, SHIFT, 26}, },
			{{-1, REDUCE, 80}, },
			{{-1, ERROR, 21}, {13, SHIFT, 28}, },
			{{-1, ERROR, 22}, {21, SHIFT, 29}, },
			{{-1, ERROR, 23}, {46, SHIFT, 30}, },
			{{-1, REDUCE, 87}, },
			{{-1, REDUCE, 66}, {22, SHIFT, 23}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 28}, {0, SHIFT, 32}, {1, SHIFT, 33}, {3, SHIFT, 34}, {4, SHIFT, 35}, {11, SHIFT, 36}, {29, SHIFT, 37}, {44, SHIFT, 38}, {45, SHIFT, 39}, {46, SHIFT, 40}, },
			{{-1, ERROR, 29}, {46, SHIFT, 48}, },
			{{-1, REDUCE, 67}, },
			{{-1, REDUCE, 88}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 36}, {0, SHIFT, 32}, {1, SHIFT, 33}, {3, SHIFT, 34}, {4, SHIFT, 35}, {11, SHIFT, 36}, {29, SHIFT, 37}, {44, SHIFT, 38}, {45, SHIFT, 39}, {46, SHIFT, 40}, },
			{{-1, ERROR, 37}, {0, SHIFT, 32}, {1, SHIFT, 33}, {3, SHIFT, 34}, {4, SHIFT, 35}, {11, SHIFT, 36}, {44, SHIFT, 38}, {45, SHIFT, 39}, {46, SHIFT, 40}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 72}, {11, SHIFT, 51}, },
			{{-1, ERROR, 41}, {14, SHIFT, 52}, {15, SHIFT, 53}, {16, SHIFT, 54}, {17, SHIFT, 55}, {18, SHIFT, 56}, {19, SHIFT, 57}, {28, SHIFT, 58}, {30, SHIFT, 59}, },
			{{-1, REDUCE, 11}, {5, SHIFT, 60}, {6, SHIFT, 61}, },
			{{-1, REDUCE, 20}, {7, SHIFT, 62}, {8, SHIFT, 63}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 26}, {13, SHIFT, 64}, },
			{{-1, REDUCE, 29}, },
			{{-1, ERROR, 48}, {11, SHIFT, 65}, },
			{{-1, ERROR, 49}, {12, SHIFT, 66}, {15, SHIFT, 53}, {16, SHIFT, 54}, {17, SHIFT, 55}, {18, SHIFT, 56}, {19, SHIFT, 57}, {28, SHIFT, 58}, {30, SHIFT, 59}, },
			{{-1, REDUCE, 17}, {5, SHIFT, 60}, {6, SHIFT, 61}, },
			{{-1, ERROR, 51}, {0, SHIFT, 32}, {1, SHIFT, 33}, {3, SHIFT, 34}, {4, SHIFT, 35}, {11, SHIFT, 36}, {12, SHIFT, 67}, {29, SHIFT, 37}, {44, SHIFT, 38}, {45, SHIFT, 39}, {46, SHIFT, 40}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 53}, {0, SHIFT, 32}, {1, SHIFT, 33}, {3, SHIFT, 34}, {4, SHIFT, 35}, {11, SHIFT, 36}, {44, SHIFT, 38}, {45, SHIFT, 39}, {46, SHIFT, 40}, },
			{{-1, ERROR, 54}, {0, SHIFT, 32}, {1, SHIFT, 33}, {3, SHIFT, 34}, {4, SHIFT, 35}, {11, SHIFT, 36}, {44, SHIFT, 38}, {45, SHIFT, 39}, {46, SHIFT, 40}, },
			{{-1, ERROR, 55}, {0, SHIFT, 32}, {1, SHIFT, 33}, {3, SHIFT, 34}, {4, SHIFT, 35}, {11, SHIFT, 36}, {44, SHIFT, 38}, {45, SHIFT, 39}, {46, SHIFT, 40}, },
			{{-1, ERROR, 56}, {0, SHIFT, 32}, {1, SHIFT, 33}, {3, SHIFT, 34}, {4, SHIFT, 35}, {11, SHIFT, 36}, {44, SHIFT, 38}, {45, SHIFT, 39}, {46, SHIFT, 40}, },
			{{-1, ERROR, 57}, {0, SHIFT, 32}, {1, SHIFT, 33}, {3, SHIFT, 34}, {4, SHIFT, 35}, {11, SHIFT, 36}, {44, SHIFT, 38}, {45, SHIFT, 39}, {46, SHIFT, 40}, },
			{{-1, ERROR, 58}, {0, SHIFT, 32}, {1, SHIFT, 33}, {3, SHIFT, 34}, {4, SHIFT, 35}, {11, SHIFT, 36}, {44, SHIFT, 38}, {45, SHIFT, 39}, {46, SHIFT, 40}, },
			{{-1, ERROR, 59}, {0, SHIFT, 32}, {1, SHIFT, 33}, {3, SHIFT, 34}, {4, SHIFT, 35}, {11, SHIFT, 36}, {44, SHIFT, 38}, {45, SHIFT, 39}, {46, SHIFT, 40}, },
			{{-1, ERROR, 60}, {0, SHIFT, 32}, {1, SHIFT, 33}, {3, SHIFT, 34}, {4, SHIFT, 35}, {11, SHIFT, 36}, {44, SHIFT, 38}, {45, SHIFT, 39}, {46, SHIFT, 40}, },
			{{-1, ERROR, 61}, {0, SHIFT, 32}, {1, SHIFT, 33}, {3, SHIFT, 34}, {4, SHIFT, 35}, {11, SHIFT, 36}, {44, SHIFT, 38}, {45, SHIFT, 39}, {46, SHIFT, 40}, },
			{{-1, ERROR, 62}, {0, SHIFT, 32}, {1, SHIFT, 33}, {3, SHIFT, 34}, {4, SHIFT, 35}, {11, SHIFT, 36}, {44, SHIFT, 38}, {45, SHIFT, 39}, {46, SHIFT, 40}, },
			{{-1, ERROR, 63}, {0, SHIFT, 32}, {1, SHIFT, 33}, {3, SHIFT, 34}, {4, SHIFT, 35}, {11, SHIFT, 36}, {44, SHIFT, 38}, {45, SHIFT, 39}, {46, SHIFT, 40}, },
			{{-1, ERROR, 64}, {0, SHIFT, 32}, {1, SHIFT, 33}, {3, SHIFT, 34}, {4, SHIFT, 35}, {11, SHIFT, 36}, {29, SHIFT, 37}, {44, SHIFT, 38}, {45, SHIFT, 39}, {46, SHIFT, 40}, },
			{{-1, REDUCE, 43}, {23, SHIFT, 1}, {24, SHIFT, 2}, {25, SHIFT, 3}, {26, SHIFT, 4}, {36, SHIFT, 5}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 74}, },
			{{-1, REDUCE, 76}, {10, SHIFT, 86}, {15, SHIFT, 53}, {16, SHIFT, 54}, {17, SHIFT, 55}, {18, SHIFT, 56}, {19, SHIFT, 57}, {28, SHIFT, 58}, {30, SHIFT, 59}, },
			{{-1, ERROR, 69}, {12, SHIFT, 89}, },
			{{-1, REDUCE, 15}, {5, SHIFT, 60}, {6, SHIFT, 61}, },
			{{-1, REDUCE, 16}, {5, SHIFT, 60}, {6, SHIFT, 61}, },
			{{-1, REDUCE, 12}, {5, SHIFT, 60}, {6, SHIFT, 61}, },
			{{-1, REDUCE, 13}, {5, SHIFT, 60}, {6, SHIFT, 61}, },
			{{-1, REDUCE, 14}, {5, SHIFT, 60}, {6, SHIFT, 61}, },
			{{-1, REDUCE, 19}, {5, SHIFT, 60}, {6, SHIFT, 61}, },
			{{-1, REDUCE, 18}, {5, SHIFT, 60}, {6, SHIFT, 61}, },
			{{-1, REDUCE, 21}, {7, SHIFT, 62}, {8, SHIFT, 63}, },
			{{-1, REDUCE, 22}, {7, SHIFT, 62}, {8, SHIFT, 63}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 25}, },
			{{-1, ERROR, 81}, {14, SHIFT, 90}, {15, SHIFT, 53}, {16, SHIFT, 54}, {17, SHIFT, 55}, {18, SHIFT, 56}, {19, SHIFT, 57}, {28, SHIFT, 58}, {30, SHIFT, 59}, },
			{{-1, ERROR, 82}, {46, SHIFT, 91}, },
			{{-1, ERROR, 83}, {12, SHIFT, 92}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 45}, {10, SHIFT, 93}, },
			{{-1, ERROR, 86}, {0, SHIFT, 32}, {1, SHIFT, 33}, {3, SHIFT, 34}, {4, SHIFT, 35}, {11, SHIFT, 36}, {29, SHIFT, 37}, {44, SHIFT, 38}, {45, SHIFT, 39}, {46, SHIFT, 40}, },
			{{-1, REDUCE, 91}, },
			{{-1, REDUCE, 77}, {10, SHIFT, 86}, },
			{{-1, REDUCE, 75}, },
			{{-1, REDUCE, 73}, },
			{{-1, REDUCE, 48}, },
			{{-1, ERROR, 92}, {42, SHIFT, 98}, },
			{{-1, ERROR, 93}, {23, SHIFT, 1}, {24, SHIFT, 2}, {25, SHIFT, 3}, {26, SHIFT, 4}, {36, SHIFT, 5}, },
			{{-1, REDUCE, 85}, },
			{{-1, REDUCE, 46}, {10, SHIFT, 93}, },
			{{-1, REDUCE, 78}, {15, SHIFT, 53}, {16, SHIFT, 54}, {17, SHIFT, 55}, {18, SHIFT, 56}, {19, SHIFT, 57}, {28, SHIFT, 58}, {30, SHIFT, 59}, },
			{{-1, REDUCE, 92}, },
			{{-1, ERROR, 98}, {23, SHIFT, 1}, {24, SHIFT, 2}, {25, SHIFT, 3}, {26, SHIFT, 4}, {31, SHIFT, 102}, {33, SHIFT, 103}, {34, SHIFT, 104}, {36, SHIFT, 5}, {38, SHIFT, 105}, {42, SHIFT, 98}, {43, SHIFT, 106}, {46, SHIFT, 40}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 86}, },
			{{-1, ERROR, 102}, {11, SHIFT, 118}, },
			{{-1, ERROR, 103}, {11, SHIFT, 119}, },
			{{-1, ERROR, 104}, {11, SHIFT, 120}, },
			{{-1, ERROR, 105}, {37, SHIFT, 121}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 81}, },
			{{-1, REDUCE, 63}, },
			{{-1, REDUCE, 83}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 57}, },
			{{-1, ERROR, 113}, {20, SHIFT, 26}, },
			{{-1, ERROR, 114}, {9, SHIFT, 123}, {13, SHIFT, 64}, },
			{{-1, ERROR, 115}, {20, SHIFT, 26}, },
			{{-1, ERROR, 116}, {23, SHIFT, 1}, {24, SHIFT, 2}, {25, SHIFT, 3}, {26, SHIFT, 4}, {31, SHIFT, 102}, {33, SHIFT, 103}, {34, SHIFT, 104}, {36, SHIFT, 5}, {38, SHIFT, 105}, {42, SHIFT, 98}, {43, SHIFT, 125}, {46, SHIFT, 40}, },
			{{-1, ERROR, 117}, {31, SHIFT, 102}, {33, SHIFT, 103}, {34, SHIFT, 104}, {38, SHIFT, 105}, {42, SHIFT, 98}, {43, SHIFT, 128}, {46, SHIFT, 40}, },
			{{-1, ERROR, 118}, {0, SHIFT, 32}, {1, SHIFT, 33}, {3, SHIFT, 34}, {4, SHIFT, 35}, {11, SHIFT, 36}, {29, SHIFT, 37}, {44, SHIFT, 38}, {45, SHIFT, 39}, {46, SHIFT, 40}, },
			{{-1, ERROR, 119}, {46, SHIFT, 131}, },
			{{-1, ERROR, 120}, {0, SHIFT, 32}, {1, SHIFT, 33}, {3, SHIFT, 34}, {4, SHIFT, 35}, {11, SHIFT, 36}, {29, SHIFT, 37}, {44, SHIFT, 38}, {45, SHIFT, 39}, {46, SHIFT, 40}, },
			{{-1, ERROR, 121}, {39, SHIFT, 135}, },
			{{-1, REDUCE, 62}, },
			{{-1, ERROR, 123}, {0, SHIFT, 32}, {1, SHIFT, 33}, {3, SHIFT, 34}, {4, SHIFT, 35}, {11, SHIFT, 36}, {29, SHIFT, 37}, {44, SHIFT, 38}, {45, SHIFT, 39}, {46, SHIFT, 40}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 82}, },
			{{-1, ERROR, 127}, {31, SHIFT, 102}, {33, SHIFT, 103}, {34, SHIFT, 104}, {38, SHIFT, 105}, {42, SHIFT, 98}, {43, SHIFT, 137}, {46, SHIFT, 40}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 84}, },
			{{-1, ERROR, 130}, {12, SHIFT, 138}, {15, SHIFT, 53}, {16, SHIFT, 54}, {17, SHIFT, 55}, {18, SHIFT, 56}, {19, SHIFT, 57}, {28, SHIFT, 58}, {30, SHIFT, 59}, },
			{{-1, REDUCE, 72}, },
			{{-1, REDUCE, 69}, {22, SHIFT, 139}, },
			{{-1, ERROR, 133}, {20, SHIFT, 142}, },
			{{-1, ERROR, 134}, {12, SHIFT, 143}, {15, SHIFT, 53}, {16, SHIFT, 54}, {17, SHIFT, 55}, {18, SHIFT, 56}, {19, SHIFT, 57}, {28, SHIFT, 58}, {30, SHIFT, 59}, },
			{{-1, ERROR, 135}, {0, SHIFT, 32}, {1, SHIFT, 33}, {3, SHIFT, 34}, {4, SHIFT, 35}, {11, SHIFT, 36}, {29, SHIFT, 37}, {44, SHIFT, 38}, {45, SHIFT, 39}, {46, SHIFT, 40}, },
			{{-1, REDUCE, 68}, {15, SHIFT, 53}, {16, SHIFT, 54}, {17, SHIFT, 55}, {18, SHIFT, 56}, {19, SHIFT, 57}, {28, SHIFT, 58}, {30, SHIFT, 59}, },
			{{-1, REDUCE, 42}, },
			{{-1, ERROR, 138}, {31, SHIFT, 102}, {33, SHIFT, 103}, {34, SHIFT, 104}, {38, SHIFT, 105}, {42, SHIFT, 98}, {46, SHIFT, 40}, },
			{{-1, ERROR, 139}, {46, SHIFT, 131}, },
			{{-1, REDUCE, 89}, },
			{{-1, REDUCE, 70}, {22, SHIFT, 139}, },
			{{-1, ERROR, 142}, {0, SHIFT, 32}, {1, SHIFT, 33}, {3, SHIFT, 34}, {4, SHIFT, 35}, {11, SHIFT, 36}, {29, SHIFT, 37}, {44, SHIFT, 38}, {45, SHIFT, 39}, {46, SHIFT, 40}, },
			{{-1, ERROR, 143}, {35, SHIFT, 151}, },
			{{-1, ERROR, 144}, {15, SHIFT, 53}, {16, SHIFT, 54}, {17, SHIFT, 55}, {18, SHIFT, 56}, {19, SHIFT, 57}, {20, SHIFT, 26}, {28, SHIFT, 58}, {30, SHIFT, 59}, },
			{{-1, REDUCE, 53}, },
			{{-1, ERROR, 146}, {32, SHIFT, 153}, },
			{{-1, REDUCE, 52}, {32, REDUCE, 57}, },
			{{-1, REDUCE, 71}, },
			{{-1, REDUCE, 90}, },
			{{-1, ERROR, 150}, {15, SHIFT, 53}, {16, SHIFT, 54}, {17, SHIFT, 55}, {18, SHIFT, 56}, {19, SHIFT, 57}, {20, SHIFT, 154}, {28, SHIFT, 58}, {30, SHIFT, 59}, },
			{{-1, ERROR, 151}, {31, SHIFT, 102}, {33, SHIFT, 103}, {34, SHIFT, 104}, {38, SHIFT, 105}, {42, SHIFT, 98}, {46, SHIFT, 40}, },
			{{-1, REDUCE, 61}, },
			{{-1, ERROR, 153}, {31, SHIFT, 102}, {33, SHIFT, 103}, {34, SHIFT, 104}, {38, SHIFT, 105}, {42, SHIFT, 98}, {46, SHIFT, 40}, },
			{{-1, ERROR, 154}, {46, SHIFT, 131}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 58}, },
			{{-1, ERROR, 159}, {12, SHIFT, 160}, },
			{{-1, ERROR, 160}, {31, SHIFT, 102}, {33, SHIFT, 103}, {34, SHIFT, 104}, {38, SHIFT, 105}, {42, SHIFT, 98}, {46, SHIFT, 40}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 60}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 7}, },
			{{-1, 8}, {13, 20}, },
			{{-1, 9}, {98, 107}, {116, 126}, },
			{{-1, 10}, {6, 16}, {65, 82}, {93, 82}, },
			{{-1, 11}, {14, 21}, },
			{{-1, 41}, {36, 49}, {51, 68}, {64, 81}, {86, 96}, {118, 130}, {120, 134}, {123, 136}, {135, 144}, {142, 150}, },
			{{-1, 42}, {37, 50}, {53, 70}, {54, 71}, {55, 72}, {56, 73}, {57, 74}, {58, 75}, {59, 76}, },
			{{-1, 43}, {60, 77}, {61, 78}, },
			{{-1, 44}, {62, 79}, {63, 80}, },
			{{-1, 45}, },
			{{-1, 12}, },
			{{-1, 17}, },
			{{-1, 108}, {92, 99}, },
			{{-1, 83}, },
			{{-1, 84}, },
			{{-1, 94}, {95, 101}, },
			{{-1, 85}, {93, 100}, },
			{{-1, 27}, {113, 122}, {115, 124}, {144, 152}, },
			{{-1, 109}, {117, 129}, {127, 129}, },
			{{-1, 110}, {138, 145}, {151, 155}, {153, 157}, {160, 161}, },
			{{-1, 111}, {138, 146}, {151, 156}, {153, 158}, {160, 162}, },
			{{-1, 112}, {138, 147}, },
			{{-1, 19}, },
			{{-1, 24}, {25, 31}, },
			{{-1, 113}, {119, 132}, {139, 148}, {154, 132}, },
			{{-1, 133}, {154, 159}, },
			{{-1, 140}, {141, 149}, },
			{{-1, 46}, {98, 114}, {116, 114}, {117, 114}, {119, 114}, {127, 114}, {138, 114}, {139, 114}, {151, 114}, {153, 114}, {154, 114}, {160, 114}, },
			{{-1, 47}, {98, 115}, {116, 115}, {117, 115}, {127, 115}, {138, 115}, {151, 115}, {153, 115}, {160, 115}, },
			{{-1, 69}, },
			{{-1, 87}, {88, 97}, },
			{{-1, 13}, },
			{{-1, 116}, },
			{{-1, 117}, {116, 127}, },
			{{-1, 95}, },
			{{-1, 25}, },
			{{-1, 141}, },
			{{-1, 88}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'inteiro', 'real', 'caractere', 'booleano', 'ruma', 'arrume', EOF",
			"expecting: '[', 'assim', id",
			"expecting: 'de'",
			"expecting: 'inteiro', 'real', 'caractere', 'booleano', 'nada', 'ruma'",
			"expecting: EOF",
			"expecting: id",
			"expecting: 'assim', id",
			"expecting: 'inteiro', 'real', 'caractere', 'booleano'",
			"expecting: 'assim'",
			"expecting: ';', ','",
			"expecting: ';'",
			"expecting: '['",
			"expecting: ':'",
			"expecting: 'inteiro', 'real', 'caractere', 'booleano', 'se', 'senao', 'arrodeie', 'enquanto', 'ruma', 'mande', 'arrume', 'inicio', 'fim', id, EOF",
			"expecting: 'inteiro', 'real', 'caractere', 'booleano', 'se', 'arrodeie', 'enquanto', 'ruma', 'mande', 'arrume', 'inicio', 'fim', id, EOF",
			"expecting: num inteiro, num real, caractere, string, '(', '!', 'sim', 'nao', id",
			"expecting: '+', '-', '*', '/', '|', ')', ']', '<', '>', '=', '<=', '>=', ';', ',', 'ou', 'e'",
			"expecting: num inteiro, num real, caractere, string, '(', 'sim', 'nao', id",
			"expecting: '+', '-', '*', '/', ':=', '|', '(', ')', '[', ']', '<', '>', '=', '<=', '>=', ';', ',', 'ou', 'e'",
			"expecting: ']', '<', '>', '=', '<=', '>=', 'ou', 'e'",
			"expecting: '+', '-', '|', ')', ']', '<', '>', '=', '<=', '>=', ';', ',', 'ou', 'e'",
			"expecting: '+', '-', '*', '/', '|', ')', '[', ']', '<', '>', '=', '<=', '>=', ';', ',', 'ou', 'e'",
			"expecting: '('",
			"expecting: ')', '<', '>', '=', '<=', '>=', 'ou', 'e'",
			"expecting: num inteiro, num real, caractere, string, '(', ')', '!', 'sim', 'nao', id",
			"expecting: ')', 'inteiro', 'real', 'caractere', 'booleano', 'ruma'",
			"expecting: '|', ')', '<', '>', '=', '<=', '>=', 'ou', 'e'",
			"expecting: ')'",
			"expecting: '|', ')'",
			"expecting: '+', '-', '*', '/', ':=', '|', ')', '[', ']', '<', '>', '=', '<=', '>=', ';', ',', 'ou', 'e'",
			"expecting: 'inicio'",
			"expecting: 'inteiro', 'real', 'caractere', 'booleano', 'ruma'",
			"expecting: 'inteiro', 'real', 'caractere', 'booleano', 'se', 'arrodeie', 'enquanto', 'ruma', 'mande', 'inicio', 'fim', id",
			"expecting: 'se', 'senao', 'arrodeie', 'enquanto', 'mande', 'inicio', 'fim', id",
			"expecting: 'se', 'arrodeie', 'enquanto', 'mande', 'inicio', 'fim', id",
			"expecting: ':=', '['",
			"expecting: 'volta'",
			"expecting: ')', ';', ','",
			"expecting: ')', '<', '>', '=', '<=', '>=', ';', ',', 'ou', 'e'",
			"expecting: 'se', 'arrodeie', 'enquanto', 'mande', 'inicio', id",
			"expecting: 'repita'",
			"expecting: '<', '>', '=', '<=', '>=', ';', 'ou', 'e'",
			"expecting: 'senao'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 1, 1, 1, 2, 3, 4, 0, 0, 5, 6, 0, 0, 7, 8, 8, 8, 9, 10, 0, 11, 12, 5, 9, 9, 13, 14, 15, 5, 9, 9, 16, 16, 16, 16, 15, 17, 16, 16, 18, 19, 20, 16, 16, 16, 21, 16, 22, 23, 20, 24, 6, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 15, 25, 16, 16, 26, 27, 20, 20, 20, 20, 20, 20, 20, 16, 16, 16, 16, 19, 5, 27, 27, 28, 15, 28, 28, 16, 29, 28, 30, 31, 28, 28, 26, 28, 32, 0, 28, 28, 22, 22, 22, 2, 13, 32, 33, 34, 34, 34, 33, 10, 35, 10, 32, 34, 15, 5, 15, 36, 33, 15, 33, 13, 32, 34, 13, 34, 23, 35, 37, 10, 23, 15, 38, 13, 39, 5, 37, 37, 15, 40, 41, 34, 42, 33, 37, 37, 41, 39, 33, 39, 5, 34, 33, 34, 33, 27, 39, 34, 33, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
